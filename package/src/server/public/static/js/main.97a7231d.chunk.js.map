{"version":3,"sources":["components/pages/print.tsx","images/elabLogo.svg","components/headers/header.tsx","popups/login.tsx","components/cards/mainFunctionCard.tsx","components/pages/mainFunctions.tsx","components/pages/storageSearch.tsx","services/requests.ts","services/api.ts","App.tsx","index.tsx"],"names":["LabelType","HeaderComponent","textStyle","padding","AppBar","position","Toolbar","style","Typography","variant","paddingLeft","paddingRight","Box","fontWeight","src","elabLogo","alt","height","width","React","Component","LoginModal","props","passwordRef","loginRef","defaultLabel","elabService","state","username","password","open","error","label","loading","tried","msg","this","setState","Login","then","success","loginSuccess","loginFailed","catch","e","console","labelStyle","inputStyle","marginBottom","textFields","name","placeholder","onchange","target","value","type","onkeydown","key","focus","Modal","onClose","Grid","container","spacing","direction","alignItems","justify","outline","Card","component","align","color","item","justifyContent","map","f","TextField","onChange","onKeyDown","Button","disabled","onClick","login","ref","Fade","in","CircularProgress","size","thickness","Prod_LoginModal","ConcreteLoginModal","MainFunctionCard","mainText","settings","s","cardStyle","border","background","cursor","newStyle","Object","assign","theme","palette","primary","main","onMouseEnter","onHover","onMouseLeave","onLeave","MainFunctionsComponent","cardClicked","functions","clicked","marginTop","fn","PrintComponent","apiService","UPDATE_DELAY","labels","labelsRaw","printDisabled","printAllDisabled","lastChange","Date","now","printing","gettingData","labelTemplateName","samples","samp","S","id","bar","length","startingSamples","parseLabels","toBarcodes","split","filter","trim","isInteger","v","test","barcodes","dispBar","cut","Math","max","substring","BarcodeLookup","data","newLabels","l","undefined","tokens","includes","ret","text","CUSTOM","temp","shift","join","d","SAMPLE","STORAGE_LOCATION","err","finally","sampleInputText","setTimeout","Labels","Barcode","Texts","TemplateName","stop","PrintLabels","tries","poll","PollPrintReport","m","alert","inputPlaceholder","alignContent","gutterBottom","multiline","defaultValue","onLabelInputChanged","rows","columns","field","hide","headerName","sortable","rowsPerPageOptions","onPageSizeChange","isRowSelectable","params","row","disableSelectionOnClick","disableColumnMenu","disableColumnFilter","disableColumnSelector","opacity","LinearProgress","margin","onPrintAll","StorageSearchComponent","searching","results","storages","selectedSamples","errorText","errorCands","currentLocation","doTry","LoggedIn","GetStorages","res","allmap","reduce","acc","toLowerCase","parent","children","set","Map","parents","forEach","k","push","get","Promise","resolve","found","search","x","subsearch","arr","q","terms","term","domain","cands","GetSamplesByStorage","sampleID","sampleType","searchText","doSearch","log","getSamples","buttonStyle","onSearchChanged","bind","onPrintCallback","ReloadStorages","RequestService","baseUrl","requester","axios","path","url","endsWith","body","post","genUrl","ApiService","clientID","firstname","lastname","ClientID","that","POST","Username","Password","raw","Code","FirstName","LastName","reject","b","makeBody","Barcodes","Results","StorageLayerID","Op","ID","Message","Prod_ApiService","ApiServiceFactory","I","createTheme","contrastText","secondary","contrastThreshold","tonalOffset","App","defaultActiveComponent","GetApiService","mainFunctions","makeNextPage","activeComponent","toFunctionPage","document","getElementById","href","className","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.97a7231d.chunk.js","sourcesContent":["import React from \"react\";\nimport { PrintProps } from '../../models/props';\nimport { Typography, TextField, Grid, Card, Button, LinearProgress, Fade, CircularProgress} from '@material-ui/core';\nimport { DataGrid, GridColDef, GridRowParams } from '@material-ui/data-grid';\nimport { ApiService } from \"../../services/api\";\nimport { Sample } from \"../../models/common\";\n\nenum LabelType {\n    SAMPLE = 'Sample',\n    STORAGE_LOCATION = 'Location',\n    CUSTOM = 'Unknown',\n}\n\ninterface LabelData {\n    id: string\n    bar: string\n    text: string\n    type: LabelType\n}\n\ninterface PrintState {\n    labels: LabelData[]\n    labelsRaw: string\n    printDisabled: boolean\n    printAllDisabled: boolean\n    lastChange: number\n    printing: boolean\n    gettingData: boolean\n    labelTemplateName: string\n}\n\nexport class PrintComponent extends React.Component<PrintProps, PrintState> {\n    private apiService: ApiService\n    private readonly UPDATE_DELAY = 650;\n\n    constructor(props: PrintProps) {\n        super(props)\n        this.apiService = props.elabService\n        this.state = {\n            labels: [],\n            labelsRaw: '',\n            printDisabled: true,\n            printAllDisabled: false,\n            lastChange: Date.now(),\n            printing: false,\n            gettingData: false,\n            labelTemplateName: ''\n        }\n    }\n\n    private toBarcodes(samples: Sample[] | undefined) {\n        if (!samples) return []\n        return samples.map((samp) => {\n            const S = samp.id\n            const BAR_L = 15\n            const PRE = '005'\n            let bar = `${S}`\n            while (bar.length < BAR_L - PRE.length) {\n                bar = `0${bar}`\n            }\n            return `${PRE}${bar}`\n        })\n    }\n\n    public componentDidMount() {\n        if (this.props.startingSamples) {\n            this.parseLabels(this.toBarcodes(this.props.startingSamples))\n        }\n    }\n\n    private parseLabels(labels:string[]=[]) {\n        if (labels.length===0) {\n            labels = this.state.labelsRaw.split('\\n')\n        }\n        labels = labels.filter((s)=>{return s.trim().length>0})\n        const isInteger = (v: string) => !/[^0-9]/.test(v)\n        const isBarcode = labels.map(isInteger)\n        const barcodes = labels.filter(isInteger)\n\n        const dispBar = (bar: string) => {\n            const cut = Math.max(0, bar.length - 5)\n            return cut? `...${bar.substring(cut,)}` : bar\n        }\n\n        this.apiService.BarcodeLookup(barcodes)\n        .then((data)=>{\n            const newLabels: LabelData[] = labels.map((l) => {\n                if (data[l] === undefined) {\n                    const tokens = l.includes('\\t')? l.split('\\t'): l.split(' ')\n                    const ret = {\n                        id: '',\n                        bar: '',\n                        text: l,\n                        type: LabelType.CUSTOM,\n                    }\n                    if (tokens.length > 1 && isInteger(tokens[0])) {\n                        const temp = tokens.shift();\n                        ret.bar = temp? dispBar(temp): '';\n                        ret.id = temp? temp: '';\n                        ret.text = tokens.join(' ');\n                    } else {\n                        ret.id = ''\n                        ret.bar = ''\n                        ret.text = l\n                    }\n                    return ret\n                } else {\n                    // console.log(data[l])\n                    const d: any = data[l]\n                    return {\n                        bar: dispBar(l),\n                        id: l,\n                        text: d.name,\n                        type: d['sampleID']? LabelType.SAMPLE: LabelType.STORAGE_LOCATION,\n                    }\n                }\n            })\n            this.setState({\n                labels: newLabels\n            })\n        }).catch((err)=>{\n            console.error(err);\n        }).finally(()=>{\n            this.setState({\n                gettingData: false\n            })\n        })\n\n        this.setState({\n            gettingData: true\n        })\n    }\n\n    private onLabelInputChanged(e: any) {\n        const sampleInputText = e.target.value;\n        this.setState({\n            labelsRaw: sampleInputText,\n            lastChange: Date.now()\n        })\n\n        setTimeout(() => {\n            const now = Date.now()\n            if (now - this.state.lastChange >= this.UPDATE_DELAY) {\n                this.parseLabels()\n            }\n        }, this.UPDATE_DELAY);\n    }\n\n    private onPrint() {\n\n    }\n\n    private onPrintAll() {\n        const data = {\n            Labels: this.state.labels.map((l) => {\n                return { Barcode: l.id, Texts: [l.text] }\n            }),\n            TemplateName: this.state.labelTemplateName \n        }\n\n        this.setState({\n            printing: true\n        })\n\n        const stop = () => {\n            this.setState({\n                printing: false\n            })\n        }\n\n        this.apiService.PrintLabels(data).then(id=>{\n            let tries = 25\n            const poll = () => {\n                tries--;\n                if (tries <= 0) {\n                    stop()\n                    return\n                }\n                setTimeout(() => {\n                    this.apiService.PollPrintReport(id).then((m) => {\n                        if (!m || m==='') {\n                            poll()\n                        } else {\n                            stop()\n                            alert(m)\n                        }\n                    })\n                }, 500);\n            }\n            poll()\n        })\n\n\n    }\n\n    render(): JSX.Element {\n        const sampleColumns: GridColDef[] = [\n            { field: 'disabled', hide: true },\n            { field: 'id', headerName: 'ID', hide: true },\n            { field: 'bar', headerName: 'Barcode', width: 100, sortable: false },\n            { field: 'text', headerName: 'Text', width: 600, sortable: false },\n        ]\n\n        const outerStyle: React.CSSProperties = {\n            marginTop: '5vh',\n            justifyContent: 'center',\n            alignItems: 'center',\n            alignContent: 'center',\n            // border: '1px solid orange'\n        }\n        const cardStyle: React.CSSProperties = {\n            // border: '1px solid green',\n            // width: '80vw',\n            padding: '2em',\n        }\n        const buttonStyle: React.CSSProperties = {\n            margin: '0 1em 0 1em'\n        }\n        const inputPlaceholder = [\n            '123 box 23',\n            '005000000123456',\n            '...'\n        ].join('\\n')\n        return (\n            <Grid container justifyContent='center' style={outerStyle}>\n                <Card style={cardStyle}>\n                    <Grid container direction=\"column\" spacing={3}>\n                        <Grid item>\n                            <Typography variant=\"h5\" component=\"h2\" align=\"left\" gutterBottom={true} style={{}}>\n                                Print Labels\n                            </Typography>\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                                label=\"Items\"\n                                placeholder={inputPlaceholder}\n                                multiline\n                                variant=\"outlined\"\n                                style={{ width: '70em' }}\n                                defaultValue={this.toBarcodes(this.props.startingSamples).join('\\n')}\n                                onChange={(e) => { this.onLabelInputChanged(e) }}\n                            >\n                            </TextField>\n                        </Grid>\n                        <Grid item style={{ height: '30em'}} justify=\"center\">\n                            <Fade in={this.state.gettingData} style={{\n                                position: 'absolute',\n                                marginTop: '5em',\n                            }}>\n                                <CircularProgress size={50}/>\n                            </Fade>\n                            <DataGrid\n                                rows={this.state.labels}\n                                columns={sampleColumns}\n                                rowsPerPageOptions={[100]}\n                                onPageSizeChange={() => {}}\n                                isRowSelectable={(params: GridRowParams) => !params.row.disabled}\n                                // checkboxSelection\n                                disableSelectionOnClick\n                                disableColumnMenu\n                                disableColumnFilter\n                                disableColumnSelector\n                                style={{opacity: this.state.gettingData? 0.25: 1}}\n                            />\n                            <Grid item>\n                                <Fade in={this.state.printing}>\n                                    <LinearProgress />\n                                </Fade>\n                            </Grid>\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                                label=\"Label Template Name\"\n                                placeholder={'default'}\n                                variant=\"outlined\"\n                                style={{ width: '70em' }}\n                                onChange={(e) => { this.setState({labelTemplateName: e.target.value}) }}\n                            >\n                            </TextField>\n                        </Grid>\n                        <Grid item>\n                            {/* <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                disabled={this.state.printDisabled}\n                                style={buttonStyle}\n                                onClick={() => this.onPrint()}>\n                                Print\n                            </Button> */}\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                disabled={this.state.printAllDisabled}\n                                style={buttonStyle}\n                                onClick={() => this.onPrintAll()}>\n                                Print All\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Card>\n            </Grid>\n        )\n    }\n}","export default __webpack_public_path__ + \"static/media/elabLogo.6161d4d0.svg\";","import React from 'react';\n// import './header.css';\nimport { AppBar, Toolbar, Typography, Box } from '@material-ui/core';\nimport elabLogo from '../../images/elabLogo.svg'\n\nexport class HeaderComponent extends React.Component {\n    render(): JSX.Element {\n        const textStyle: React.CSSProperties = {\n            padding: '2vh 0.5vw'\n        }\n        const titleStyle: React.CSSProperties = {\n            paddingLeft: '10vw',\n            paddingRight: '0.2vw'\n        }\n        return (\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <div style={textStyle}>\n                        <Typography variant='h4' style={titleStyle}>\n                            <Box fontWeight='fontWeightBold'>\n                                Limes Portal\n                            </Box>\n                        </Typography>\n                    </div>\n                    <img src={elabLogo} alt='eLab' height='40vw' width='40vw'/>\n                    <div style={textStyle}>\n                        <Typography variant=\"subtitle1\">\n                            Powered by eLab\n                        </Typography>\n                    </div>\n                </Toolbar>\n            </AppBar>\n        )\n    }\n}","import React from 'react';\nimport { LoginProps } from '../models/props';\nimport { Modal, Grid, TextField, Button, CircularProgress, Fade, Typography, Card} from '@material-ui/core';\nimport { ApiService } from '../services/api';\n\nimport { DEBUG } from '../config'\nimport { U, P } from '../credentials/elab'\n\ninterface LoginState {\n    username: string\n    password: string\n    open: boolean\n    error: boolean\n    label: string\n    loading: boolean\n    tried: boolean\n}\n\nexport abstract class LoginModal extends React.Component<LoginProps, LoginState> {\n    protected passwordRef: any\n    protected loginRef: any\n    protected readonly defaultLabel = \"\"\n    protected readonly elabService: ApiService\n\n    constructor(props: LoginProps) {\n        super(props)\n\n        this.state = {\n            username: \"\",\n            password: \"\",\n            open: true,\n            error: false,\n            label: this.defaultLabel,\n            loading: false,\n            tried: false,\n        }\n\n        this.elabService = props.elabService;\n    }\n\n    protected loginFailed(msg: string, tried: boolean=true) {\n        this.setState({\n            error: true,\n            label: msg,\n            loading: false,\n            tried: tried,\n        })\n    }\n\n    protected loginSuccess() {\n        this.setState({ open: false, loading: false, tried: false })\n    }\n\n    protected login() {\n        // console.log([this.state.username, this.state.password])\n        if (this.state.tried) { return }\n        this.setState({ label: '', loading: true})\n        if (!(this.state.username && this.state.password)) {\n            this.loginFailed('fields cannot be empty')\n            return\n        }\n\n        this.elabService.Login(this.state.username, this.state.password)\n            .then(([success, msg]) => {\n                if (success) {\n                    this.loginSuccess()\n                } else {\n                    this.loginFailed(msg)\n                }\n            }).catch(e => {\n                console.error(e)\n                this.loginFailed(typeof(e)==='string'? e: 'No response. Are you on the UBC network?', false)\n            })\n    }\n\n    private onClose() { }\n\n    render(): JSX.Element {\n        const modalStyle: React.CSSProperties = {}\n        const mainGridStyle: React.CSSProperties = {\n            outline: 'transparent',\n            height: '100%',\n            // border: '1px solid red'\n        }\n        const cardStyle: React.CSSProperties = {\n            outline: 'transparent',\n            padding: '1em 2em 1.2em 2em', // t r b l\n            width: '25em',\n            // height: '20em',\n        }\n        const cardGridStyle: React.CSSProperties = {}\n        const labelStyle: React.CSSProperties = {}\n        const inputStyle: React.CSSProperties = {\n            width: '100%',\n            marginBottom: '1em',\n            // border: '1px solid red'\n        }\n        const buttonStyle: React.CSSProperties = {\n            width: '10em',\n        }\n\n        const textFields = [\n            {\n                name: \"username\",\n                label: \"Username\",\n                placeholder: \"username\",\n                onchange: (e: any) => {\n                    this.setState({\n                        error: false,\n                        tried: false,\n                        username: e.target.value\n                    })\n                },\n            },\n            {\n                name: \"password\",\n                label: \"Password\",\n                placeholder: \"*****\",\n                type: \"password\",\n                onchange: (e: any) => {\n                    this.setState({\n                        error: false,\n                        tried: false,\n                        password: e.target.value\n                    })\n                },\n                onkeydown: (e: any) => { e.key === \"Enter\" && this.loginRef?.focus() },\n            }\n        ]\n\n        return (\n            <Modal open={this.state.open} onClose={this.onClose} style={modalStyle}>\n                <Grid container spacing={0} direction=\"column\" alignItems=\"center\" justify=\"center\" style={mainGridStyle}>\n                    <Card style={cardStyle}>\n                        <Grid container justify=\"center\" direction=\"column\" style={cardGridStyle} spacing={0}>\n                            <Typography variant=\"h5\" component=\"h2\" align=\"center\" style={labelStyle}>\n                                Login\n                            </Typography>\n                            <Typography variant=\"subtitle1\" align=\"center\" color=\"error\" style={labelStyle}>\n                                {this.state.label}\n                            </Typography>\n                            <Grid item container justifyContent=\"center\" direction=\"column\">\n                                <form>\n                                    {textFields.map((f) => (\n                                        <Grid item key={f.name}>\n                                            <TextField\n                                                label={f.label}\n                                                name={f.name}\n                                                placeholder={f.placeholder}\n                                                style={inputStyle}\n                                                type={f.type}\n                                                error={this.state.error}\n                                                onChange={f.onchange}\n                                                onKeyDown={f.onkeydown}\n                                            />\n                                        </Grid>\n                                    ))}\n                                </form>\n                            </Grid>\n                            <Grid container justify=\"center\" >\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    style={buttonStyle}\n                                    disabled={this.state.loading}\n                                    onClick={() => { this.login() }}\n                                    ref={(e: any) => { this.loginRef = e }}>\n                                    Login\n                                    <Fade\n                                        in={this.state.loading}>\n                                        <CircularProgress size={20} thickness={5} style={{\n                                            position: 'absolute'\n\n                                        }}/>\n                                    </Fade>\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </Card>\n                </Grid>\n            </Modal>\n        )\n    }\n}\n\nclass Prod_LoginModal extends LoginModal {\n\n}\n\nclass Dev_LoginModal extends LoginModal {\n    constructor(props: LoginProps) {\n        super(props)\n\n        this.state = {\n            username: U,\n            password: P,\n            open: false,\n            error: false,\n            label: this.defaultLabel,\n            loading: false,\n            tried: false,\n        }\n        \n    }\n}\n\nexport const ConcreteLoginModal = DEBUG ? Dev_LoginModal : Prod_LoginModal","import React from 'react';\n// import \"./mainFunctionCard.css\"\nimport { Typography, Grid, Card } from '@material-ui/core';\nimport { MainFunctionCardProps, MainFunctionCardSettings } from '../../models/props';\n\ninterface MainFunctionCardState {\n    disabled: boolean\n    cardStyle: React.CSSProperties\n}\n\nexport class MainFunctionCard extends React.Component<MainFunctionCardProps, MainFunctionCardState> {\n    private mainText: string;\n    private onClick: (settings: MainFunctionCardSettings) => void;\n    private settings: MainFunctionCardSettings;\n\n    constructor(props: MainFunctionCardProps) {\n        super(props);\n        const s = props.settings\n\n        this.settings = props.settings\n        this.mainText = s.name\n        this.state = {\n            disabled: s.disabled,\n            cardStyle: {\n                width: '200px',\n                height: '200px',\n                border: '2px solid transparent',\n                background: s.disabled? 'lightgrey': '',\n                cursor: s.disabled? '': 'pointer',\n            }\n        }\n        this.onClick = props.onClick\n    }\n\n    private onHover() {\n        if (this.state.disabled) return\n        const newStyle: any = {}\n        Object.assign(newStyle, this.state.cardStyle)\n        newStyle.border = `2px solid ${this.props.theme.palette.primary.main}`\n        this.setState({cardStyle: newStyle})\n    }\n\n    private onLeave() {\n        if (this.state.disabled) return\n        const newStyle: any = {}\n        Object.assign(newStyle, this.state.cardStyle)\n        newStyle.border = '2px solid transparent'\n        this.setState({cardStyle: newStyle})\n    }\n\n    render(): JSX.Element {\n        const colStyle: React.CSSProperties = {\n            // border: '1px solid red'\n            height: '100%'\n        }\n\n        return (\n            <Card\n                style={this.state.cardStyle}\n                onClick={this.state.disabled? ()=>{} : () => this.onClick(this.settings)}\n                onMouseEnter={()=>{this.onHover()}}\n                onMouseLeave={()=>{this.onLeave()}}>\n                <Grid\n                    container\n                    spacing={0}\n                    justifyContent='center'\n                    alignItems='center'\n                    direction='column'\n                    style={colStyle}\n                >\n                    <Grid item>\n                        <Typography variant=\"h5\" component=\"h2\">\n                            {this.mainText}\n                        </Typography>\n                    </Grid>\n                </Grid>\n            </Card>\n        )\n    }\n}","import React from \"react\";\n// import \"./mainFunctionsGrid.css\"\nimport { Grid } from \"@material-ui/core\";\nimport { MainFunctionCard } from \"../cards/mainFunctionCard\";\nimport { MainFunctionsGridProps, MainFunctionCardSettings } from \"../../models/props\";\n\ninterface MainFunctionsState {\n    functions: MainFunctionCardSettings[]\n}\n\nexport class MainFunctionsComponent extends React.Component<MainFunctionsGridProps, MainFunctionsState> {\n    private cardClicked: (settings: MainFunctionCardSettings)=>void\n\n    constructor(props: MainFunctionsGridProps) {\n        super(props)\n        this.state = {\n            functions: props.functions,\n        }\n        this.cardClicked = props.clicked\n    }\n    render(): JSX.Element {\n        return (\n            <Grid\n                style={{\n                    marginTop: '10vh',\n                    // border: '1px solid red'\n                }}\n            >\n                <Grid container justifyContent='center' spacing={5}>\n                    {this.state.functions.map((fn) => (\n                        <Grid key={fn.name} item>\n                            <MainFunctionCard\n                                theme={this.props.theme}\n                                settings={fn}\n                                onClick={this.cardClicked}\n                            />\n                        </Grid>\n                    ))}\n                </Grid>\n            </Grid>\n        )\n    }\n}","import React from \"react\";\nimport { StorageSearchProps } from '../../models/props';\nimport { Typography, TextField, Grid, Card, Button, LinearProgress, Fade, CircularProgress } from '@material-ui/core';\nimport { DataGrid, GridColDef, GridRowParams } from '@material-ui/data-grid';\nimport { ApiService } from \"../../services/api\";\nimport { Sample } from \"../../models/common\";\n\ninterface Storage {\n    id: number\n    name: string\n    parent: number\n    children: Storage[]\n}\n\ninterface SearchState {\n    searching: boolean\n    currentLocation: string\n    results: string\n    lastChange: number\n    storages: Storage[]\n    selectedSamples: Sample[]\n    errorText: string\n    errorCands: string\n}\n\nexport class StorageSearchComponent extends React.Component<StorageSearchProps, SearchState> {\n    private apiService: ApiService\n    private readonly UPDATE_DELAY = 650;\n    constructor(props: StorageSearchProps) {\n        super(props)\n        this.apiService = props.elabService\n        this.state = {\n            searching: false,\n            results: '',\n            lastChange: Date.now(),\n            storages: [],\n            selectedSamples: [],\n            errorText: '',\n            errorCands: '',\n            currentLocation: '',\n        }\n    }\n\n    public componentDidMount() {\n        const setup = () => {\n            this.apiService.GetStorages().then(res => {\n                if (!res) return 0\n                const allmap: Map<number, Storage> = res.reduce((acc: Map<number, Storage>, s: any) => {\n                    const name: string = s['name']\n                    const id = s['storageLayerID']\n                    const v: Storage = {\n                        id: id,\n                        name: name.toLowerCase(),\n                        parent: s['parentStorageLayerID'],\n                        children: [],\n                    }\n                    acc.set(id, v)\n                    return acc\n                }, new Map())\n    \n                const parents: Storage[] = []\n                allmap.forEach((v, k, map) => {\n                    if (v.parent === 0) {\n                        parents.push(v)\n                    }else{\n                        allmap.get(v.parent)?.children.push(v)\n                    }\n                })\n    \n                this.setState({\n                    storages: parents\n                })\n            })\n        }\n\n        let tries = 5\n        const doTry = () => {\n            if (this.apiService.LoggedIn()) {\n                setup()\n            } else {\n                tries --;\n                if (tries <= 0) return\n                setTimeout(() => {\n                    doTry()\n                }, 100);\n            }\n        }\n        doTry()\n    }\n\n    private doSearch(text: string) {\n        return new Promise<number>((resolve) => {\n            const search = text.split(',').map((x)=> {return x.trim()})\n\n            const subsearch = (arr: Storage[], q: string) => {\n                const terms = q.split(' ')\n                const cands = arr.filter((s) => {\n                    return terms.reduce((acc: boolean, term) => {\n                        return acc && s.name.includes(term)\n                    }, true)\n                })\n                return cands\n            }\n\n            let res = \"\"\n            let found\n            let success = true\n            let domain = this.state.storages\n            for (let term of search) {\n                term = term.toLowerCase()\n                const cands = subsearch(domain, term)\n                if (cands.length === 1) {\n                    const s = cands[0]\n                    domain = s.children\n                    res += `, ${s.name}`\n                    found = s\n                    this.setState({\n                        errorText: '',\n                        errorCands: '',\n                    })\n                } else if (cands.length === 0) {\n                    success = false\n                    this.setState({\n                        searching: false,\n                        errorText: `No storage location with name [${term}]`,\n                    })\n                    break\n                } else { // more than one\n                    success = false\n                    this.setState({\n                        searching: false,\n                        errorText: `Ambiguity for [${term}] between:`,\n                        errorCands: `${cands.map((s) => {return s.name}).join(', ')}`,\n                    })\n                    break\n                }\n            }\n    \n            if (success && found) {\n                this.setState({\n                    currentLocation: res\n                })\n                resolve(found.id)\n            } else {\n                return resolve(0)\n            }\n        })\n    }\n\n    private getSamples(id: number) {\n        return this.apiService.GetSamplesByStorage(id).then((samples: any[]) => {\n            if (!samples) samples = []\n            this.setState({\n                selectedSamples: samples.map<Sample>((s) => {\n                    return {\n                        id: s.sampleID,\n                        name: s.name,\n                        type: s.sampleType.name\n                    }\n                }),\n                searching: false\n            })\n        })\n    }\n\n    private onSearchChanged(e: any) {\n        const searchText = e.target.value;\n        this.setState({\n            lastChange: Date.now(),\n        })\n\n        setTimeout(() => {\n            const now = Date.now()\n            if (now - this.state.lastChange >= this.UPDATE_DELAY) {\n                this.setState({\n                    searching: true\n                })\n\n                this.doSearch(searchText)\n                .then((id: number) => {\n                    console.log(id)\n                    if (id === 0) return\n        \n                    return this.getSamples(id)\n                })\n            }\n        }, this.UPDATE_DELAY);\n    }\n\n    render(): JSX.Element {\n        // const classes = this.classes\n        const sampleColumns: GridColDef[] = [\n            { field: 'disabled', hide: true },\n            { field: 'id', headerName: 'Barcode', width: 100, sortable: false },\n            { field: 'name', headerName: 'Name', width: 400, sortable: false },\n            { field: 'type', headerName: 'Type', width: 350, sortable: false },\n        ]\n\n        const outerStyle: React.CSSProperties = {\n            marginTop: '5vh',\n            justifyContent: 'center',\n            alignItems: 'center',\n            alignContent: 'center',\n            // border: '1px solid orange'\n        }\n        const cardStyle: React.CSSProperties = {\n            // border: '1px solid green',\n            width: '90vw',\n            padding: '2em',\n        }\n        const buttonStyle: React.CSSProperties = {\n            margin: '0 1em 0 1em'\n        }\n        const inputPlaceholder = 'freezer 7, self 2, rack 3'\n        return (\n            <Grid container justifyContent='center' style={outerStyle}>\n                <Card style={cardStyle}>\n                    <Grid container direction=\"column\" spacing={3}>\n                        <Grid item>\n                            <Typography variant=\"h5\" component=\"h2\" align=\"left\" gutterBottom={true} style={{}}>\n                                Samples By Storage Location\n                            </Typography>\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                                    label=\"Search\"\n                                    placeholder={inputPlaceholder}\n                                    variant=\"outlined\"\n                                    onChange={this.onSearchChanged.bind(this)}\n                                    style={{\n                                        width: \"90vw\"\n                                    }}\n                                >\n                            </TextField>\n                        </Grid>\n                        <Grid item>\n                            <Typography align=\"left\" style={{\n                                color: 'primary',\n                            }}>\n                                {this.state.currentLocation}\n                            </Typography>\n                            <Typography align=\"left\" style={{\n                                color: 'red',\n                            }}>\n                                {this.state.errorText}\n                            </Typography>\n                            <Typography align=\"left\" style={{\n                                color: 'red',\n                            }}>\n                                {this.state.errorCands}\n                            </Typography>\n                        </Grid>\n                        <Grid item style={{ height: '30em' }} justify=\"center\">\n                            <Fade in={this.state.searching} style={{\n                                position: 'absolute',\n                                marginTop: '5em',\n                            }}>\n                                <CircularProgress size={50} />\n                            </Fade>\n                            <DataGrid\n                                rows={this.state.selectedSamples}\n                                columns={sampleColumns}\n                                rowsPerPageOptions={[100]}\n                                onPageSizeChange={() => { }}\n                                isRowSelectable={(params: GridRowParams) => !params.row.disabled}\n                                disableSelectionOnClick\n                                disableColumnMenu\n                                disableColumnFilter\n                                disableColumnSelector\n                                style={{ opacity: this.state.searching ? 0.25 : 1 }}\n                            />\n                        </Grid>\n                        <Grid item>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => {this.props.onPrintCallback(this.state.selectedSamples)}}\n                                style={buttonStyle}\n                            >\n                                Print Labels\n                            </Button>\n                            <Button\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                onClick={() => {this.apiService.ReloadStorages()}}\n                                style={buttonStyle}\n                            >\n                                Reload Storages\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Card>\n            </Grid>\n        )\n    }\n}","import axios, { AxiosStatic } from \"axios\";\n\nexport const GET = 'GET'\nexport const POST = 'POST'\n\nexport class RequestService {\n    private readonly baseUrl: string\n    private readonly requester: AxiosStatic\n\n    constructor(baseUrl: string = '') {\n        this.baseUrl = baseUrl;\n        this.requester = axios\n\n        // const ep = 'call'\n        // console.log('start')\n        // axios.post(`api/d1/${ep}`, {\n        //     ProviderName: 'elab',\n        //     RequestPayload: {\n        //         TargetEndpoint: 'auth/user',\n        //         Method: 'POST',\n        //         Body: {\n        //             username: username,\n        //             password: password\n        //         }\n        //     }\n        // }).then(x => {\n        //     console.log(x)\n        // }).catch(e => {\n        //     console.log('err')\n        //     console.log(e)\n        // }).finally(() => {\n        //     console.log('done')\n        // })\n    }\n\n    private genUrl(path: string) {\n        const url = `${this.baseUrl}/${path}`\n        return url.endsWith('/')? url.substring(0, url.length - 1): url;\n    }\n\n    // public GET(path: string): Promise<any> {\n    //     console.log(this.genUrl(path))\n    //     return this.requester.get(this.ge`${this.baseUrl}/${path}`nUrl(path)).then(x => {\n    //         console.log(x)\n    //         return 'done'\n    //     }).catch(e => {\n    //         console.log(e)\n    //     })\n    // }\n\n    public POST({path = '', body = {}}): Promise<any> {\n        return this.requester.post(this.genUrl(path), body)\n    }\n}","import { RequestService, POST } from \"./requests\"\nimport { U, P, T } from \"../credentials/elab\"\nimport { DEBUG } from \"../config\"\n\nexport abstract class ApiService {\n    protected clientID: string\n    protected firstname: string\n    protected lastname: string\n    private readonly requester: RequestService\n\n    constructor() {\n        // actually threading through server due to CORS security\n        // does not significantly slow requests\n        this.requester = new RequestService('api/d1')\n        this.clientID = ''\n        this.firstname = ''\n        this.lastname = ''\n    }\n\n    private makeBody(body: any={}) {\n        body.ClientID = this.clientID;\n        return body\n    }\n\n    public LoggedIn() {\n        return this.clientID !== ''\n    }\n\n    public Login(username: string, password: string): Promise<[boolean, string]> {\n        const that = this\n        return this.requester.POST({\n            path: 'login',\n            body: {\n                Username: username,\n                Password: password\n            }\n        })\n        .then(raw => {\n            const res = raw.data;\n            switch(res.Code) {\n                case 200:\n                    that.clientID = res.ClientID\n                    that.firstname = res.FirstName\n                    that.lastname = res.LastName\n                    console.log(`logged in as ${res.FirstName}`)\n                    return [true, '']\n                case 401:\n                    return [false, 'Incorrect username/password']\n                default:\n                    return Promise.reject('Oops, something crashed...')\n            }\n        })\n    }\n\n    public BarcodeLookup(barcodes: string[]): Promise<any> {\n        const b = this.makeBody({\n            Barcodes: barcodes\n        })\n        return this.requester.POST({\n            path: 'barcodes',\n            body: b\n        }).then(raw => {\n            const res = raw.data.Results;\n            return res;\n        })\n    }\n\n    public GetStorages(): Promise<any> {\n        const b = this.makeBody()\n        return this.requester.POST({\n            path: 'allstorages',\n            body: b\n        }).then(raw => {\n            const res = raw.data.Results\n            return res\n        })\n    }\n\n    public GetSamplesByStorage(id: number): Promise<any> {\n        const b = this.makeBody({\n            StorageLayerID: id\n        })\n        return this.requester.POST({\n            path: 'samplesbystorage',\n            body: b\n        }).then(raw => {\n            const res = raw.data.Results\n            return res\n        })\n    }\n\n    public ReloadStorages(): void {\n        const b = this.makeBody()\n        this.requester.POST({\n            path: 'reloadcache',\n            body: b\n        })\n    }\n\n    public PrintLabels(labels: any) {\n        const b = this.makeBody(labels)\n        b.Op = 'print'\n        return this.requester.POST({\n            path: 'printops',\n            body: b\n        }).then(raw => {\n            return raw.data.ID\n        })\n    }\n\n    public PollPrintReport(id: string) {\n        const b = this.makeBody({\n            ID: id,\n            Op: 'pollreport',\n        })\n        return this.requester.POST({\n            path: 'printops',\n            body: b\n        }).then(raw=> {\n            return raw.data.Message\n        })\n    }\n}\n\nclass Prod_ApiService extends ApiService {\n\n}\n\nclass Dev_ApiService extends ApiService {\n    constructor() {\n        super()\n        this.Login(U, P)\n    }\n}\n\nexport class ApiServiceFactory {\n    private static I: ApiService\n\n    public static GetApiService() {\n        if(!this.I) {\n            this.I = DEBUG? new Dev_ApiService(): new Prod_ApiService()\n        }\n\n        return this.I\n    }\n}","// import logo from './logo.svg';\nimport React from 'react';\nimport './App.css';\nimport { MuiThemeProvider, createTheme } from '@material-ui/core/styles';\nimport { HeaderComponent } from './components/headers/header';\nimport { ConcreteLoginModal } from './popups/login';\nimport { MainFunctionsComponent } from './components/pages/mainFunctions';\nimport { PrintComponent } from './components/pages/print';\nimport { StorageSearchComponent } from './components/pages/storageSearch';\n\nimport { AppProps, MainFunctionCardSettings } from './models/props';\nimport { ApiService, ApiServiceFactory } from './services/api';\nimport { DEBUG } from './config'\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#00abab',\n      contrastText: '#FFFFFF',\n    },\n    secondary: {\n      main: '#d32f2f',\n    },\n    contrastThreshold: 3,\n    tonalOffset: 0.2,\n  },\n});\n\ninterface AppState {\n  activeComponent: any\n}\n\nexport class App extends React.Component<AppProps, AppState> {\n  private defaultActiveComponent: any\n  private elabService: ApiService\n\n  constructor(props: AppProps) {\n    super(props)\n    this.elabService = ApiServiceFactory.GetApiService()\n\n    const makePrintComponent = () => <PrintComponent elabService={this.elabService}/>\n    const makeStorageSearchComponent = () => <StorageSearchComponent elabService={this.elabService} onPrintCallback={\n      (samples) => {\n        this.setState({\n          activeComponent: <PrintComponent elabService={this.elabService} startingSamples={samples}/>\n        })\n      }\n    }/>\n    const mainFunctions: MainFunctionCardSettings[] = [\n      {\n        name: 'Print',\n        disabled: false,\n        makeNextPage: makePrintComponent\n      },\n      {\n        name: 'Search Storage Locations',\n        disabled: false,\n        makeNextPage: makeStorageSearchComponent\n      },\n      {\n        name: 'Scanner coming soon!',\n        disabled: true,\n      }\n    ]\n    this.defaultActiveComponent = (\n      <MainFunctionsComponent\n        theme={theme}\n        functions={mainFunctions}\n        clicked={(settings: MainFunctionCardSettings) => this.toFunctionPage(settings)}\n      />)\n    this.state = {\n      activeComponent: DEBUG? <PrintComponent elabService={this.elabService} startingSamples={[\n        9763616,\n        9763617,\n        9763618,\n        9763619,\n        9763620,\n      ].map(i=>{return {id: i, name:'s', type: 't'}})}/>: this.defaultActiveComponent,\n    }\n  }\n\n  private toFunctionPage(settings: MainFunctionCardSettings) {\n    if (settings && settings.makeNextPage) {\n      this.setState({activeComponent: settings.makeNextPage()})\n    }\n  }\n\n  render(): JSX.Element {\n    const fav: any = document.getElementById(\"favicon\");\n    fav.href = '/forcefavicon'\n    return (\n      <MuiThemeProvider theme={theme}>\n        <div className='app-container'>\n        <HeaderComponent />\n        <ConcreteLoginModal elabService={this.elabService}/>\n        {this.state.activeComponent}\n        </div>\n      </MuiThemeProvider>\n    )\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport './index.css';\nimport '@fontsource/roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}