{"version":3,"sources":["components/pages/print.tsx","images/elabLogo.svg","components/headers/header.tsx","popups/login.tsx","components/cards/mainFunctionCard.tsx","components/pages/mainFunctions.tsx","components/pages/storageSearch.tsx","services/requests.ts","services/api.ts","App.tsx","index.tsx"],"names":["LabelType","HeaderComponent","textStyle","padding","AppBar","position","Toolbar","Button","variant","color","disableElevation","onClick","e","props","onHome","style","height","width","Typography","paddingLeft","paddingRight","Box","fontWeight","src","elabLogo","alt","React","Component","LoginModal","passwordRef","loginRef","defaultLabel","elabService","state","username","password","open","error","label","loading","tried","msg","this","setState","Login","then","success","loginSuccess","loginFailed","catch","console","labelStyle","inputStyle","marginBottom","textFields","name","placeholder","onchange","target","value","type","onkeydown","key","focus","Modal","onClose","Grid","container","spacing","direction","alignItems","justify","outline","Card","component","align","item","justifyContent","map","f","TextField","onChange","onKeyDown","disabled","login","ref","Fade","in","CircularProgress","size","thickness","Prod_LoginModal","ConcreteLoginModal","MainFunctionCard","mainText","settings","s","cardStyle","border","background","cursor","newStyle","Object","assign","theme","palette","primary","main","onMouseEnter","onHover","onMouseLeave","onLeave","MainFunctionsComponent","cardClicked","functions","clicked","marginTop","fn","PrintComponent","apiService","UPDATE_DELAY","lastChange","NO_ELAB_RECORD","Date","now","labels","labelsRaw","printDisabled","printAllDisabled","printing","gettingData","labelTemplateName","printerName","availablePrinters","availableTemplates","refreshing","copied","samples","samp","S","barcode","bar","length","startingBarcodes","parseLabels","n","onRefresh","split","l_tokens","filter","trim","l","includes","t","isInteger","v","test","barcodes","tok","dispBar","cut","Math","max","substring","BarcodeLookup","raw","data","id","newLabels","tokens","tf","shift","ret","bardisp","addText","join","CUSTOM","log","undefined","d","SAMPLE","STORAGE_LOCATION","err","finally","sampleInputText","setTimeout","Promise","resolve","reject","tries","poll","PollPrintInfo","Success","Data","Labels","first","Barcode","Texts","concat","TemplateName","PrinterName","PrintLabels","awaitResults","alert","Message","RefreshPrintInfo","printers","templates","header","rows","full","navigator","clipboard","writeText","buttonStyle","margin","inputPlaceholder","alignContent","gutterBottom","multiline","defaultValue","onLabelInputChanged","columns","field","hide","headerName","sortable","rowsPerPageOptions","onPageSizeChange","isRowSelectable","params","row","disableSelectionOnClick","disableColumnMenu","disableColumnFilter","disableColumnSelector","opacity","LinearProgress","select","marginRight","option","MenuItem","bind","onPrintAll","onToClipboard","StorageSearchComponent","searching","results","storages","selectedSamples","errorText","errorCands","currentLocation","reloadingStorage","searchText","GetStorages","res","allmap","reduce","acc","toLowerCase","parent","children","set","Map","parents","forEach","k","push","get","doTry","LoggedIn","setup","text","search","x","subsearch","arr","q","terms","term","found","domain","cands","currentLoc","GetSamplesByStorage","sampleID","sampleType","doSearch","getSamples","ReloadStorages","onSearchChanged","onPrintCallback","onReloadStorages","RequestService","baseUrl","requester","axios","path","url","endsWith","body","post","genUrl","ApiService","clientID","firstname","lastname","ClientID","that","POST","Username","Password","Code","FirstName","LastName","b","makeBody","Barcodes","Results","StorageLayerID","status","Op","ID","Prod_ApiService","ApiServiceFactory","I","createTheme","contrastText","secondary","contrastThreshold","tonalOffset","App","defaultActiveComponent","GetApiService","makeStorageSearchComponent","activeComponent","mainFunctions","makeNextPage","toFunctionPage","document","getElementById","href","className","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.63133090.chunk.js","sourcesContent":["import React from \"react\";\nimport { PrintProps } from '../../models/props';\nimport { Typography, TextField, Grid, Card, Button, LinearProgress, Fade, CircularProgress, MenuItem} from '@material-ui/core';\nimport { DataGrid, GridColDef, GridRowParams } from '@material-ui/data-grid';\nimport RefreshRoundedIcon from '@mui/icons-material/RefreshRounded';\nimport { ApiService } from \"../../services/api\";\nimport { Sample } from \"../../models/common\";\nimport { RawOff } from \"@mui/icons-material\";\n\nenum LabelType {\n    SAMPLE = 'Sample',\n    STORAGE_LOCATION = 'Location',\n    CUSTOM = 'Unknown',\n}\n\ninterface LabelData {\n    id: number\n    bar: string\n    bardisp: string\n    name: string \n    addText: string\n    type: LabelType\n    tokens: string[]\n}\n\ninterface PrintState {\n    labels: LabelData[]\n    labelsRaw: string\n    printDisabled: boolean\n    printAllDisabled: boolean\n    printing: boolean\n    gettingData: boolean\n    labelTemplateName: string\n    printerName: string\n    availablePrinters: string[]\n    availableTemplates: string[]\n    refreshing: boolean\n    copied: number\n}\n\nexport class PrintComponent extends React.Component<PrintProps, PrintState> {\n    private apiService: ApiService;\n    private readonly UPDATE_DELAY = 650;\n    private lastChange: number;\n    private readonly NO_ELAB_RECORD = '*(No eLab Record)';\n\n    constructor(props: PrintProps) {\n        super(props)\n        this.apiService = props.elabService\n        this.lastChange = Date.now();\n        this.state = {\n            labels: [],\n            labelsRaw: '',\n            printDisabled: true,\n            printAllDisabled: false,\n            printing: false,\n            gettingData: false,\n            labelTemplateName: '',\n            printerName: '',\n            availablePrinters: [],\n            availableTemplates: [],\n            refreshing: false,\n            copied: 0\n        }\n    }\n\n    private toBarcodes(samples: Sample[] | undefined) {\n        if (!samples) return []\n        return samples.map((samp) => {\n            const S = samp.barcode\n            const BAR_L = 15\n            const PRE = '005'\n            let bar = `${S}`\n            while (bar.length < BAR_L - PRE.length) {\n                bar = `0${bar}`\n            }\n            return `${PRE}${bar}`\n        })\n    }\n\n    public componentDidMount() {\n        if (this.props.startingBarcodes) {\n            this.parseLabels(this.props.startingBarcodes.map((n)=>`${n}`))\n        }\n        this.onRefresh()\n    }\n\n    private parseLabels(labels:string[]=[]) {\n        if (labels.length===0) {\n            labels = this.state.labelsRaw.split('\\n')\n        }\n        labels = labels.filter((s)=>{return s.trim().length>0})\n        const l_tokens: string[][] = labels.map((l)=>l.includes('\\t')? l.split('\\t'): l.split(',').map(t=>t.trim()))\n        const isInteger = (v: string) => !/[^0-9]/.test(v)\n        const barcodes: string[] = l_tokens.filter((tok)=>isInteger(tok[0])).map((tok)=>tok[0])\n\n        const dispBar = (bar: string) => {\n            const cut = Math.max(0, bar.length - 5)\n            return cut? `...${bar.substring(cut,)}` : bar\n        }\n\n        this.apiService.BarcodeLookup(barcodes)\n        .then((raw)=>{\n            const data = raw? raw : {}\n            let id = 0;\n            const newLabels: LabelData[] = l_tokens.map((tokens) => {\n                const tf = tokens.shift()\n                const ret = {\n                    id: id,\n                    bar: tf? tf:'',\n                    bardisp: tf? dispBar(tf): '',\n                    addText: tokens.join(', '),\n                    name: this.NO_ELAB_RECORD,\n                    type: LabelType.CUSTOM,\n                    tokens: tokens,\n                }\n\n                if (tf) {\n                    let bar: string = tf\n                    while (bar.length < 12) bar = `0${bar}`\n                    if (bar.length == 12) bar = `005${bar}`\n                    while (bar.length < 15) bar = `0${bar}`\n                    console.log(data)\n                    if (data[bar] !== undefined) {\n                        const d: any = data[bar]\n                        ret.name = d?.name\n                        ret.bar = bar\n                        ret.type = d['sampleID']? LabelType.SAMPLE: LabelType.STORAGE_LOCATION\n                    }\n                }\n\n                id += 1\n                return ret\n            })\n            this.setState({\n                labels: newLabels\n            })\n        }).catch((err)=>{\n            console.error(err);\n        }).finally(()=>{\n            this.setState({\n                gettingData: false\n            })\n        })\n\n        this.setState({\n            gettingData: true\n        })\n    }\n\n    private onLabelInputChanged(e: any) {\n        const sampleInputText = e.target.value;\n        this.lastChange = Date.now()\n        setTimeout(() => {\n            const now = Date.now()\n            if (now - this.lastChange >= this.UPDATE_DELAY) {\n                this.setState({\n                    labelsRaw: sampleInputText,\n                })\n                this.parseLabels()\n            }\n        }, this.UPDATE_DELAY);\n    }\n\n    private awaitResults(id: any): Promise<any> {\n        return new Promise((resolve, reject)=> {\n            let tries = 25\n            const poll = () => {\n                tries--;\n                if (tries <= 0) {\n                    reject()\n                }\n                setTimeout(() => {\n                    this.apiService.PollPrintInfo(id).then((data) => {\n                        if (data.Success) {\n                            resolve(data.Data)\n                        } else {\n                            poll()\n                        }\n                    })\n                }, 500);\n            }\n            poll();\n        })\n    }\n\n    private onPrintAll() {\n        const data = {\n            Labels: this.state.labels.map((l) => {\n                const first = l.name===this.NO_ELAB_RECORD? [] : [l.name]\n                return { Barcode: l.bar, Texts: first.concat(l.tokens) }\n            }),\n            TemplateName: this.state.labelTemplateName,\n            PrinterName: this.state.printerName,\n        }\n\n        this.setState({\n            printing: true\n        })\n\n        this.apiService.PrintLabels(data).then(id=>{\n            return this.awaitResults(id)\n        }).then((data: any) => {\n            console.log(data)\n            alert(data.Message)\n        }).catch(() => {\n            // ignore\n        }).finally(()=> [\n            this.setState({\n                printing: false\n            })\n        ])\n\n\n    }\n\n    private onRefresh() {\n        this.setState({\n            refreshing: true,\n        })\n        this.apiService.RefreshPrintInfo().then(id=>{\n            return this.awaitResults(id)\n        }).then((data)=> {\n            // console.log(data)\n            const printers = data.printers && data.printers.length>0? data.printers : ['default']\n            const templates = data.templates && data.templates.length>0? data.templates : ['default']\n            this.setState({\n                availablePrinters: printers,\n                availableTemplates: templates,\n                refreshing: false,\n            })\n        })\n    }\n\n    private onToClipboard() {\n        this.setState({\n            copied: this.state.copied + 1\n        })\n        const DELIM = '\\t'\n        const header: string = [`Name (don't copy back)`, `Barcode`, `Addtional Text`].join(DELIM)\n        const rows: string[] = this.state.labels.map((l)=>{\n            return [l.name, l.bar, l.addText].join(DELIM)\n        })\n        const full: string = [header].concat(rows).join('\\n')\n        navigator.clipboard.writeText(full)\n\n        setTimeout(() => {\n            this.setState({\n                copied: this.state.copied - 1\n            })\n        }, 1000);\n    }\n\n    render(): JSX.Element {\n        const sampleColumns: GridColDef[] = [\n            { field: 'disabled', hide: true },\n            { field: 'id', headerName: 'ID', hide: true },\n            { field: 'bardisp', headerName: 'Barcode', width: 100, sortable: false },\n            { field: 'name', headerName: 'Item Name', width: 400, sortable: false },\n            { field: 'addText', headerName: 'Additional Text', width: 600, sortable: false },\n        ]\n\n        const outerStyle: React.CSSProperties = {\n            marginTop: '5vh',\n            justifyContent: 'center',\n            alignItems: 'center',\n            alignContent: 'center',\n            // border: '1px solid orange'\n        }\n        const cardStyle: React.CSSProperties = {\n            // border: '1px solid green',\n            // width: '80vw',\n            padding: '2em',\n        }\n        const buttonStyle: React.CSSProperties = {\n            margin: '0 1em 0 1em'\n        }\n        const inputPlaceholder = [\n            '005000000123456',\n            '005000000123456, some additional info',\n            '...'\n        ].join('\\n')\n\n        return (\n            <Grid container justifyContent='center' style={outerStyle}>\n                <Card style={cardStyle}>\n                    <Grid container direction=\"column\" spacing={3}>\n                        <Grid item>\n                            <Typography variant=\"h5\" component=\"h2\" align=\"left\" gutterBottom={true} style={{}}>\n                                Print Labels\n                            </Typography>\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                                label=\"Items\"\n                                placeholder={inputPlaceholder}\n                                multiline\n                                variant=\"outlined\"\n                                style={{ width: '70em'}}\n                                defaultValue={this.props.startingBarcodes?.map((n)=>`${n}`).join('\\n')}\n                                onChange={(e) => { this.onLabelInputChanged(e) }}\n                            >\n                            </TextField>\n                        </Grid>\n                        <Grid item style={{ height: '30em'}} justify=\"center\">\n                            <Fade in={this.state.gettingData} style={{\n                                position: 'absolute',\n                                marginTop: '5em',\n                            }}>\n                                <CircularProgress size={50}/>\n                            </Fade>\n                            <DataGrid\n                                rows={this.state.labels}\n                                columns={sampleColumns}\n                                rowsPerPageOptions={[100]}\n                                onPageSizeChange={() => {}}\n                                isRowSelectable={(params: GridRowParams) => !params.row.disabled}\n                                disableSelectionOnClick\n                                disableColumnMenu\n                                disableColumnFilter\n                                disableColumnSelector\n                                style={{opacity: this.state.gettingData? 0.25: 1}}\n                            />\n                            <Grid item>\n                                <Fade in={this.state.printing}>\n                                    <LinearProgress />\n                                </Fade>\n                            </Grid>\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                                select\n                                label=\"Label Template\"\n                                variant=\"outlined\"\n                                style={{ width: '20.5em' , marginRight: '1em' }}\n                                value={this.state.labelTemplateName}\n                                // onChange={handleChange}\n                                onChange={(e) => { this.setState({labelTemplateName: e.target.value}) }}\n                            >\n                                {this.state.availableTemplates.map((option) => (\n                                    <MenuItem key={option} value={option}>\n                                        {option}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                            <TextField\n                                select\n                                label=\"Printer Name\"\n                                variant=\"outlined\"\n                                style={{ width: '20em' }}\n                                value={this.state.printerName}\n                                onChange={(e) => { this.setState({ printerName: e.target.value }) }}\n                            >\n                                {this.state.availablePrinters.map((option) => (\n                                    <MenuItem key={option} value={option}>\n                                        {option}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={this.onRefresh.bind(this)}\n                                disabled={this.state.refreshing}\n                                style={{\n                                    margin: '0.6em',\n                                }}\n                            >\n                                <Fade in={this.state.refreshing} style={{position: 'absolute'}}>\n                                    <CircularProgress size={33}/>\n                                </Fade>\n                                <RefreshRoundedIcon />\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                disabled={!this.state.labelTemplateName || !this.state.printerName}\n                                style={buttonStyle}\n                                onClick={() => this.onPrintAll()}>\n                                Print All\n                            </Button>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                style={buttonStyle}\n                                onClick={this.onToClipboard.bind(this)}>\n                                Copy to Clipboard {this.state.copied>0? `✔` : ``}\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Card>\n            </Grid>\n        )\n    }\n}","export default __webpack_public_path__ + \"static/media/elabLogo.6161d4d0.svg\";","import React from 'react';\n// import './header.css';\nimport { AppBar, Toolbar, Typography, Box, Button } from '@material-ui/core';\nimport HomeRoundedIcon from '@mui/icons-material/HomeRounded';\nimport elabLogo from '../../images/elabLogo.svg'\nimport { HeaderProps } from '../../models/props'\n\ninterface HeaderState {\n\n}\n\nexport class HeaderComponent extends React.Component<HeaderProps, HeaderState> {\n    render(): JSX.Element {\n        const textStyle: React.CSSProperties = {\n            padding: '1em 0.2em'\n        }\n        const titleStyle: React.CSSProperties = {\n            paddingLeft: '1em',\n            paddingRight: '0.2em'\n        }\n        return (\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <div>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            disableElevation\n                            onClick={(e) => {this.props.onHome()}}\n                            style={{\n                                height: '3.5em',\n                                width: '3.5em',\n                                padding: '0'\n                            }}\n                        >\n                            <HomeRoundedIcon/>\n                        </Button>\n                    </div>\n                    <div style={textStyle}>\n                        <Typography variant='h4' style={titleStyle}>\n                            <Box fontWeight='fontWeightBold'>\n                                Limes Portal\n                            </Box>\n                        </Typography>\n                    </div>\n                    <img src={elabLogo} alt='eLab' height='35em' width='35em'/>\n                    <div style={textStyle}>\n                        <Typography variant=\"subtitle1\">\n                            Powered by eLab\n                        </Typography>\n                    </div>\n                </Toolbar>\n            </AppBar>\n        )\n    }\n}","import React from 'react';\nimport { LoginProps } from '../models/props';\nimport { Modal, Grid, TextField, Button, CircularProgress, Fade, Typography, Card} from '@material-ui/core';\nimport { ApiService } from '../services/api';\n\nimport { DEBUG } from '../config'\nimport { U, P } from '../credentials/elab'\n\ninterface LoginState {\n    username: string\n    password: string\n    open: boolean\n    error: boolean\n    label: string\n    loading: boolean\n    tried: boolean\n}\n\nexport abstract class LoginModal extends React.Component<LoginProps, LoginState> {\n    protected passwordRef: any\n    protected loginRef: any\n    protected readonly defaultLabel = \"\"\n    protected readonly elabService: ApiService\n\n    constructor(props: LoginProps) {\n        super(props)\n\n        this.state = {\n            username: \"\",\n            password: \"\",\n            open: true,\n            error: false,\n            label: this.defaultLabel,\n            loading: false,\n            tried: false,\n        }\n\n        this.elabService = props.elabService;\n    }\n\n    protected loginFailed(msg: string, tried: boolean=true) {\n        this.setState({\n            error: true,\n            label: msg,\n            loading: false,\n            tried: tried,\n        })\n    }\n\n    protected loginSuccess() {\n        this.setState({ open: false, loading: false, tried: false })\n    }\n\n    protected login() {\n        // console.log([this.state.username, this.state.password])\n        if (this.state.tried) { return }\n        this.setState({ label: '', loading: true})\n        if (!(this.state.username && this.state.password)) {\n            this.loginFailed('fields cannot be empty')\n            return\n        }\n\n        this.elabService.Login(this.state.username, this.state.password)\n            .then(([success, msg]) => {\n                if (success) {\n                    this.loginSuccess()\n                } else {\n                    this.loginFailed(msg)\n                }\n            }).catch(e => {\n                console.error(e)\n                this.loginFailed(typeof(e)==='string'? e: 'No response. Are you on the UBC network?', false)\n            })\n    }\n\n    private onClose() { }\n\n    render(): JSX.Element {\n        const modalStyle: React.CSSProperties = {}\n        const mainGridStyle: React.CSSProperties = {\n            outline: 'transparent',\n            height: '100%',\n            // border: '1px solid red'\n        }\n        const cardStyle: React.CSSProperties = {\n            outline: 'transparent',\n            padding: '1em 2em 1.2em 2em', // t r b l\n            width: '25em',\n            // height: '20em',\n        }\n        const cardGridStyle: React.CSSProperties = {}\n        const labelStyle: React.CSSProperties = {}\n        const inputStyle: React.CSSProperties = {\n            width: '100%',\n            marginBottom: '1em',\n            // border: '1px solid red'\n        }\n        const buttonStyle: React.CSSProperties = {\n            width: '10em',\n        }\n\n        const textFields = [\n            {\n                name: \"username\",\n                label: \"Username\",\n                placeholder: \"username\",\n                onchange: (e: any) => {\n                    this.setState({\n                        error: false,\n                        tried: false,\n                        username: e.target.value\n                    })\n                },\n            },\n            {\n                name: \"password\",\n                label: \"Password\",\n                placeholder: \"*****\",\n                type: \"password\",\n                onchange: (e: any) => {\n                    this.setState({\n                        error: false,\n                        tried: false,\n                        password: e.target.value\n                    })\n                },\n                onkeydown: (e: any) => { e.key === \"Enter\" && this.loginRef?.focus() },\n            }\n        ]\n\n        return (\n            <Modal open={this.state.open} onClose={this.onClose} style={modalStyle}>\n                <Grid container spacing={0} direction=\"column\" alignItems=\"center\" justify=\"center\" style={mainGridStyle}>\n                    <Card style={cardStyle}>\n                        <Grid container justify=\"center\" direction=\"column\" style={cardGridStyle} spacing={0}>\n                            <Typography variant=\"h5\" component=\"h2\" align=\"center\" style={labelStyle}>\n                                Login\n                            </Typography>\n                            <Typography variant=\"subtitle1\" align=\"center\" color=\"error\" style={labelStyle}>\n                                {this.state.label}\n                            </Typography>\n                            <Grid item container justifyContent=\"center\" direction=\"column\">\n                                <form>\n                                    {textFields.map((f) => (\n                                        <Grid item key={f.name}>\n                                            <TextField\n                                                label={f.label}\n                                                name={f.name}\n                                                placeholder={f.placeholder}\n                                                style={inputStyle}\n                                                type={f.type}\n                                                error={this.state.error}\n                                                onChange={f.onchange}\n                                                onKeyDown={f.onkeydown}\n                                            />\n                                        </Grid>\n                                    ))}\n                                </form>\n                            </Grid>\n                            <Grid container justify=\"center\" >\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    style={buttonStyle}\n                                    disabled={this.state.loading}\n                                    onClick={() => { this.login() }}\n                                    ref={(e: any) => { this.loginRef = e }}>\n                                    Login\n                                    <Fade\n                                        in={this.state.loading}>\n                                        <CircularProgress size={20} thickness={5} style={{\n                                            position: 'absolute'\n\n                                        }}/>\n                                    </Fade>\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </Card>\n                </Grid>\n            </Modal>\n        )\n    }\n}\n\nclass Prod_LoginModal extends LoginModal {\n\n}\n\nclass Dev_LoginModal extends LoginModal {\n    constructor(props: LoginProps) {\n        super(props)\n\n        this.state = {\n            username: U,\n            password: P,\n            open: false,\n            error: false,\n            label: this.defaultLabel,\n            loading: false,\n            tried: false,\n        }\n        \n    }\n}\n\nexport const ConcreteLoginModal = DEBUG ? Dev_LoginModal : Prod_LoginModal","import React from 'react';\n// import \"./mainFunctionCard.css\"\nimport { Typography, Grid, Card } from '@material-ui/core';\nimport { MainFunctionCardProps, MainFunctionCardSettings } from '../../models/props';\n\ninterface MainFunctionCardState {\n    disabled: boolean\n    cardStyle: React.CSSProperties\n}\n\nexport class MainFunctionCard extends React.Component<MainFunctionCardProps, MainFunctionCardState> {\n    private mainText: string;\n    private onClick: (settings: MainFunctionCardSettings) => void;\n    private settings: MainFunctionCardSettings;\n\n    constructor(props: MainFunctionCardProps) {\n        super(props);\n        const s = props.settings\n\n        this.settings = props.settings\n        this.mainText = s.name\n        this.state = {\n            disabled: s.disabled,\n            cardStyle: {\n                width: '200px',\n                height: '200px',\n                border: '2px solid transparent',\n                background: s.disabled? 'lightgrey': '',\n                cursor: s.disabled? '': 'pointer',\n            }\n        }\n        this.onClick = props.onClick\n    }\n\n    private onHover() {\n        if (this.state.disabled) return\n        const newStyle: any = {}\n        Object.assign(newStyle, this.state.cardStyle)\n        newStyle.border = `2px solid ${this.props.theme.palette.primary.main}`\n        this.setState({cardStyle: newStyle})\n    }\n\n    private onLeave() {\n        if (this.state.disabled) return\n        const newStyle: any = {}\n        Object.assign(newStyle, this.state.cardStyle)\n        newStyle.border = '2px solid transparent'\n        this.setState({cardStyle: newStyle})\n    }\n\n    render(): JSX.Element {\n        const colStyle: React.CSSProperties = {\n            // border: '1px solid red'\n            height: '100%'\n        }\n\n        return (\n            <Card\n                style={this.state.cardStyle}\n                onClick={this.state.disabled? ()=>{} : () => this.onClick(this.settings)}\n                onMouseEnter={()=>{this.onHover()}}\n                onMouseLeave={()=>{this.onLeave()}}>\n                <Grid\n                    container\n                    spacing={0}\n                    justifyContent='center'\n                    alignItems='center'\n                    direction='column'\n                    style={colStyle}\n                >\n                    <Grid item>\n                        <Typography variant=\"h5\" component=\"h2\">\n                            {this.mainText}\n                        </Typography>\n                    </Grid>\n                </Grid>\n            </Card>\n        )\n    }\n}","import React from \"react\";\n// import \"./mainFunctionsGrid.css\"\nimport { Grid } from \"@material-ui/core\";\nimport { MainFunctionCard } from \"../cards/mainFunctionCard\";\nimport { MainFunctionsGridProps, MainFunctionCardSettings } from \"../../models/props\";\n\ninterface MainFunctionsState {\n    functions: MainFunctionCardSettings[]\n}\n\nexport class MainFunctionsComponent extends React.Component<MainFunctionsGridProps, MainFunctionsState> {\n    private cardClicked: (settings: MainFunctionCardSettings)=>void\n\n    constructor(props: MainFunctionsGridProps) {\n        super(props)\n        this.state = {\n            functions: props.functions,\n        }\n        this.cardClicked = props.clicked\n    }\n    render(): JSX.Element {\n        return (\n            <Grid\n                style={{\n                    marginTop: '10vh',\n                    // border: '1px solid red'\n                }}\n            >\n                <Grid container justifyContent='center' spacing={5}>\n                    {this.state.functions.map((fn) => (\n                        <Grid key={fn.name} item>\n                            <MainFunctionCard\n                                theme={this.props.theme}\n                                settings={fn}\n                                onClick={this.cardClicked}\n                            />\n                        </Grid>\n                    ))}\n                </Grid>\n            </Grid>\n        )\n    }\n}","import React from \"react\";\nimport { StorageSearchProps } from '../../models/props';\nimport { Typography, TextField, Grid, Card, Button, LinearProgress, Fade, CircularProgress } from '@material-ui/core';\nimport { DataGrid, GridColDef, GridRowParams } from '@material-ui/data-grid';\nimport { ApiService } from \"../../services/api\";\n\ninterface Storage {\n    id: number\n    name: string\n    parent: number\n    children: Storage[]\n}\n\ninterface SampleRow {\n    id: number\n    name: string\n    type: string\n}\n\ninterface SearchState {\n    searching: boolean\n    currentLocation: string\n    results: string\n    lastChange: number\n    storages: Storage[]\n    selectedSamples: SampleRow[]\n    errorText: string\n    errorCands: string\n    reloadingStorage: boolean\n    searchText: string\n}\n\nexport class StorageSearchComponent extends React.Component<StorageSearchProps, SearchState> {\n    private apiService: ApiService\n    private readonly UPDATE_DELAY = 650;\n    constructor(props: StorageSearchProps) {\n        super(props)\n        this.apiService = props.elabService\n        this.state = {\n            searching: false,\n            results: '',\n            lastChange: Date.now(),\n            storages: [],\n            selectedSamples: [],\n            errorText: '',\n            errorCands: '',\n            currentLocation: '',\n            reloadingStorage: false,\n            searchText: '',\n        }\n    }\n\n    private setup() {\n        this.apiService.GetStorages().then(res => {\n            if (!res) return 0\n            const allmap: Map<number, Storage> = res.reduce((acc: Map<number, Storage>, s: any) => {\n                const name: string = s['name']\n                const id = s['storageLayerID']\n                const v: Storage = {\n                    id: id,\n                    name: name.toLowerCase(),\n                    parent: s['parentStorageLayerID'],\n                    children: [],\n                }\n                acc.set(id, v)\n                return acc\n            }, new Map())\n\n            const parents: Storage[] = []\n            allmap.forEach((v, k, map) => {\n                if (v.parent === 0) {\n                    parents.push(v)\n                }else{\n                    allmap.get(v.parent)?.children.push(v)\n                }\n            })\n\n            this.setState({\n                storages: parents\n            })\n        })\n    }\n\n    public componentDidMount() {\n        let tries = 5\n        const doTry = () => {\n            if (this.apiService.LoggedIn()) {\n                this.setup()\n            } else {\n                tries --;\n                if (tries <= 0) return\n                setTimeout(() => {\n                    doTry()\n                }, 100);\n            }\n        }\n        doTry()\n    }\n\n    private doSearch(text: string) {\n        return new Promise<number>((resolve) => {\n            const search = text.split(',').map((x)=> {return x.trim()})\n\n            const subsearch = (arr: Storage[], q: string) => {\n                const terms = q.split(' ')\n                const cands = arr.filter((s) => {\n                    return terms.reduce((acc: boolean, term) => {\n                        return acc && s.name.includes(term)\n                    }, true)\n                })\n                return cands\n            }\n\n            this.setState({\n                errorText: '',\n                errorCands: '',\n                currentLocation: '',\n            })\n\n            let res = []\n            let found\n            let success = true\n            let domain = this.state.storages\n            for (let term of search) {\n                term = term.toLowerCase()\n                const cands = subsearch(domain, term)\n                if (cands.length === 1) {\n                    const s = cands[0]\n                    domain = s.children\n                    res.push(s.name)\n                    found = s\n                } else if (cands.length === 0) {\n                    success = false\n                    const currentLoc = res.join(', ')\n                    this.setState({\n                        searching: false,\n                        errorText: term && term.length>0? `No storage location with name [${term}]`: `Maybe you have an extra comma?`,\n                        errorCands: currentLoc.length>0? ` in ${currentLoc}` : ``,\n                    })\n                    break\n                } else { // more than one\n                    success = false\n                    this.setState({\n                        searching: false,\n                        errorText: term && term.length>0? `Ambiguity for [${term}] between:` : `Specify one of:`,\n                        errorCands: `${cands.map((s) => {return s.name}).join(', ')}`,\n                    })\n                    break\n                }\n            }\n    \n            if (success && found) {\n                let bar = `${found.id}`\n                while (bar.length < 12) bar = `0${bar}`\n                if (bar.length == 12) bar = `008${bar}`\n                while (bar.length < 15) bar = `0${bar}`\n                this.setState({\n                    currentLocation: `${res.join(', ')} - ${bar}`\n                })\n                resolve(found.id)\n            } else {\n                return resolve(0)\n            }\n        })\n    }\n\n    private getSamples(id: number) {\n        return this.apiService.GetSamplesByStorage(id).then((samples: any[]) => {\n            if (!samples) samples = []\n            this.setState({\n                selectedSamples: samples.map((s) => {\n                    return {\n                        id: s.sampleID,\n                        name: s.name,\n                        type: s.sampleType.name\n                    }\n                }),\n                searching: false\n            })\n        })\n    }\n\n    private onSearchChanged(e: any=undefined) {\n        const searchText = e? e.target.value: this.state.searchText;\n        this.setState({\n            lastChange: Date.now(),\n            searchText: searchText,\n        })\n\n        setTimeout(() => {\n            const now = Date.now()\n            if (now - this.state.lastChange >= this.UPDATE_DELAY) {\n                this.setState({\n                    searching: true\n                })\n\n                this.doSearch(searchText)\n                .then((id: number) => {\n                    if (id === 0) return\n        \n                    return this.getSamples(id)\n                })\n            }\n        }, this.UPDATE_DELAY);\n    }\n\n    private onReloadStorages() {\n        this.setState({\n            reloadingStorage: true,\n        })\n        this.apiService.ReloadStorages().then((s)=>{\n            if (s == 200) {\n                this.setup()\n                this.onSearchChanged()\n            }\n            this.setState({\n                reloadingStorage: false,\n            })\n        })\n    }\n\n    render(): JSX.Element {\n        // const classes = this.classes\n        const sampleColumns: GridColDef[] = [\n            { field: 'disabled', hide: true },\n            { field: 'id', headerName: 'Barcode', width: 100, sortable: false },\n            { field: 'name', headerName: 'Name', width: 400, sortable: false },\n            { field: 'type', headerName: 'Type', width: 350, sortable: false },\n        ]\n\n        const outerStyle: React.CSSProperties = {\n            marginTop: '5vh',\n            justifyContent: 'center',\n            alignItems: 'center',\n            alignContent: 'center',\n            // border: '1px solid orange'\n        }\n        const cardStyle: React.CSSProperties = {\n            // border: '1px solid green',\n            width: '90vw',\n            padding: '2em',\n        }\n        const buttonStyle: React.CSSProperties = {\n            margin: '0 1em 0 1em'\n        }\n        const inputPlaceholder = 'freezer 7, self 2, rack 3'\n        return (\n            <Grid container justifyContent='center' style={outerStyle}>\n                <Card style={cardStyle}>\n                    <Grid container direction=\"column\" spacing={3}>\n                        <Grid item>\n                            <Typography variant=\"h5\" component=\"h2\" align=\"left\" gutterBottom={true} style={{}}>\n                                Samples By Storage Location\n                            </Typography>\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                                    label=\"Search\"\n                                    placeholder={inputPlaceholder}\n                                    variant=\"outlined\"\n                                    onChange={this.onSearchChanged.bind(this)}\n                                    style={{\n                                        width: \"90vw\"\n                                    }}\n                                >\n                            </TextField>\n                        </Grid>\n                        <Grid item>\n                            <Typography align=\"left\" style={{\n                                color: 'primary',\n                            }}>\n                                {this.state.currentLocation}\n                            </Typography>\n                            <Typography align=\"left\" style={{\n                                color: 'red',\n                            }}>\n                                {this.state.errorText}\n                            </Typography>\n                            <Typography align=\"left\" style={{\n                                color: 'red',\n                            }}>\n                                {this.state.errorCands}\n                            </Typography>\n                        </Grid>\n                        <Grid item style={{ height: '30em' }} justify=\"center\">\n                            <Fade in={this.state.searching} style={{\n                                position: 'absolute',\n                                marginTop: '5em',\n                            }}>\n                                <CircularProgress size={50} />\n                            </Fade>\n                            <DataGrid\n                                rows={this.state.selectedSamples}\n                                columns={sampleColumns}\n                                rowsPerPageOptions={[100]}\n                                onPageSizeChange={() => { }}\n                                isRowSelectable={(params: GridRowParams) => !params.row.disabled}\n                                disableSelectionOnClick\n                                disableColumnMenu\n                                disableColumnFilter\n                                disableColumnSelector\n                                style={{ opacity: this.state.searching ? 0.25 : 1 }}\n                            />\n                        </Grid>\n                        <Grid item>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => {this.props.onPrintCallback(this.state.selectedSamples.map((s)=>s.id))}}\n                                style={buttonStyle}\n                            >\n                                Print Labels\n                            </Button>\n                            <Button\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                disabled={this.state.reloadingStorage}\n                                onClick={this.onReloadStorages.bind(this)}\n                                style={buttonStyle}\n                            >\n                                Reload Storages\n                                <Fade in={this.state.reloadingStorage} style={{position: 'absolute'}}>\n                                    <CircularProgress size={33} color='secondary'/>\n                                </Fade>\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Card>\n            </Grid>\n        )\n    }\n}","import axios, { AxiosStatic } from \"axios\";\n\nexport const GET = 'GET'\nexport const POST = 'POST'\n\nexport class RequestService {\n    private readonly baseUrl: string\n    private readonly requester: AxiosStatic\n\n    constructor(baseUrl: string = '') {\n        this.baseUrl = baseUrl;\n        this.requester = axios\n\n        // const ep = 'call'\n        // console.log('start')\n        // axios.post(`api/d1/${ep}`, {\n        //     ProviderName: 'elab',\n        //     RequestPayload: {\n        //         TargetEndpoint: 'auth/user',\n        //         Method: 'POST',\n        //         Body: {\n        //             username: username,\n        //             password: password\n        //         }\n        //     }\n        // }).then(x => {\n        //     console.log(x)\n        // }).catch(e => {\n        //     console.log('err')\n        //     console.log(e)\n        // }).finally(() => {\n        //     console.log('done')\n        // })\n    }\n\n    private genUrl(path: string) {\n        const url = `${this.baseUrl}/${path}`\n        return url.endsWith('/')? url.substring(0, url.length - 1): url;\n    }\n\n    // public GET(path: string): Promise<any> {\n    //     console.log(this.genUrl(path))\n    //     return this.requester.get(this.ge`${this.baseUrl}/${path}`nUrl(path)).then(x => {\n    //         console.log(x)\n    //         return 'done'\n    //     }).catch(e => {\n    //         console.log(e)\n    //     })\n    // }\n\n    public POST({path = '', body = {}}): Promise<any> {\n        return this.requester.post(this.genUrl(path), body)\n    }\n}","import { RequestService, POST } from \"./requests\"\nimport { U, P, T } from \"../credentials/elab\"\nimport { DEBUG } from \"../config\"\n\nexport abstract class ApiService {\n    protected clientID: string\n    protected firstname: string\n    protected lastname: string\n    private readonly requester: RequestService\n\n    constructor() {\n        // actually threading through server due to CORS security\n        // does not significantly slow requests\n        this.requester = new RequestService('api/d1')\n        this.clientID = ''\n        this.firstname = ''\n        this.lastname = ''\n    }\n\n    private makeBody(body: any={}) {\n        body.ClientID = this.clientID;\n        return body\n    }\n\n    public LoggedIn() {\n        return this.clientID !== ''\n    }\n\n    public Login(username: string, password: string): Promise<[boolean, string]> {\n        const that = this\n        return this.requester.POST({\n            path: 'login',\n            body: {\n                Username: username,\n                Password: password\n            }\n        })\n        .then(raw => {\n            const res = raw.data;\n            switch(res.Code) {\n                case 200:\n                    that.clientID = res.ClientID\n                    that.firstname = res.FirstName\n                    that.lastname = res.LastName\n                    console.log(`logged in as ${res.FirstName}`)\n                    return [true, '']\n                case 401:\n                    return [false, 'Incorrect username/password']\n                default:\n                    return Promise.reject('Oops, something crashed...')\n            }\n        })\n    }\n\n    public BarcodeLookup(barcodes: string[]): Promise<any> {\n        const b = this.makeBody({\n            Barcodes: barcodes\n        })\n        return this.requester.POST({\n            path: 'barcodes',\n            body: b\n        }).then(raw => {\n            const res = raw.data.Results;\n            return res;\n        })\n    }\n\n    public GetStorages(): Promise<any> {\n        const b = this.makeBody()\n        return this.requester.POST({\n            path: 'allstorages',\n            body: b\n        }).then(raw => {\n            const res = raw.data.Results\n            return res\n        })\n    }\n\n    public GetSamplesByStorage(id: number): Promise<any> {\n        const b = this.makeBody({\n            StorageLayerID: id\n        })\n        return this.requester.POST({\n            path: 'samplesbystorage',\n            body: b\n        }).then(raw => {\n            const res = raw.data.Results\n            return res\n        })\n    }\n\n    public ReloadStorages() {\n        const b = this.makeBody()\n        return this.requester.POST({\n            path: 'reloadcache',\n            body: b\n        }).then(raw => {\n            return raw.status\n        })\n    }\n\n    public PrintLabels(labels: any) {\n        const b = this.makeBody(labels)\n        b.Op = 'print'\n        return this.requester.POST({\n            path: 'printops',\n            body: b\n        }).then(raw => {\n            return raw.data.ID\n        })\n    }\n\n    public PollPrintInfo(id: string) {\n        const b = this.makeBody({\n            ID: id,\n            Op: 'poll',\n        })\n        return this.requester.POST({\n            path: 'printops',\n            body: b\n        }).then(raw=> {\n            return raw.data\n        })\n    }\n\n    public RefreshPrintInfo() {\n        const b = this.makeBody({\n            Op: 'refreshinfo',\n        })\n        return this.requester.POST({\n            path: 'printops',\n            body: b\n        }).then(raw => {\n            return raw.data.ID\n        })\n    }\n}\n\nclass Prod_ApiService extends ApiService {\n\n}\n\nclass Dev_ApiService extends ApiService {\n    constructor() {\n        super()\n        this.Login(U, P)\n    }\n}\n\nexport class ApiServiceFactory {\n    private static I: ApiService\n\n    public static GetApiService() {\n        if(!this.I) {\n            this.I = DEBUG? new Dev_ApiService(): new Prod_ApiService()\n        }\n\n        return this.I\n    }\n}","// import logo from './logo.svg';\nimport React from 'react';\nimport './App.css';\nimport { MuiThemeProvider, createTheme } from '@material-ui/core/styles';\nimport { HeaderComponent } from './components/headers/header';\nimport { ConcreteLoginModal } from './popups/login';\nimport { MainFunctionsComponent } from './components/pages/mainFunctions';\nimport { PrintComponent } from './components/pages/print';\nimport { StorageSearchComponent } from './components/pages/storageSearch';\n\nimport { AppProps, MainFunctionCardSettings } from './models/props';\nimport { ApiService, ApiServiceFactory } from './services/api';\nimport { DEBUG } from './config'\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#00abab',\n      contrastText: '#FFFFFF',\n    },\n    secondary: {\n      main: '#d32f2f',\n    },\n    contrastThreshold: 3,\n    tonalOffset: 0.2,\n  },\n});\n\ninterface AppState {\n  activeComponent: any\n}\n\nexport class App extends React.Component<AppProps, AppState> {\n  private defaultActiveComponent: any\n  private elabService: ApiService\n\n  constructor(props: AppProps) {\n    super(props)\n    this.elabService = ApiServiceFactory.GetApiService()\n\n    const makePrintComponent = () => <PrintComponent elabService={this.elabService}/>\n    const makeStorageSearchComponent = () => <StorageSearchComponent elabService={this.elabService} onPrintCallback={\n      (samples) => {\n        this.setState({\n          activeComponent: <PrintComponent elabService={this.elabService} startingBarcodes={samples}/>\n        })\n      }\n    }/>\n    const mainFunctions: MainFunctionCardSettings[] = [\n      {\n        name: 'Print',\n        disabled: false,\n        makeNextPage: makePrintComponent\n      },\n      {\n        name: 'Search By Storage Location',\n        disabled: false,\n        makeNextPage: makeStorageSearchComponent\n      },\n      {\n        name: 'Scanner coming soon!',\n        disabled: true,\n      }\n    ]\n    this.defaultActiveComponent = (\n      <MainFunctionsComponent\n        theme={theme}\n        functions={mainFunctions}\n        clicked={(settings: MainFunctionCardSettings) => this.toFunctionPage(settings)}\n      />)\n    this.state = {\n      // activeComponent: DEBUG? <PrintComponent elabService={this.elabService} startingBarcodes={[\n      //   9764829,\n      //   9763563,\n      //   9763564,\n      // ]}/>: this.defaultActiveComponent,\n      activeComponent: DEBUG? makeStorageSearchComponent() : this.defaultActiveComponent,\n    }\n  }\n\n  private toFunctionPage(settings: MainFunctionCardSettings) {\n    if (settings && settings.makeNextPage) {\n      this.setState({activeComponent: settings.makeNextPage()})\n    }\n  }\n\n  render(): JSX.Element {\n    const fav: any = document.getElementById(\"favicon\");\n    fav.href = '/forcefavicon'\n    return (\n      <MuiThemeProvider theme={theme}>\n        <div className='app-container'>\n        <HeaderComponent onHome={() => {this.setState({activeComponent: this.defaultActiveComponent})}}/>\n        <ConcreteLoginModal elabService={this.elabService}/>\n        {this.state.activeComponent}\n        </div>\n      </MuiThemeProvider>\n    )\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport './index.css';\nimport '@fontsource/roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}