{"version":3,"sources":["components/pages/print.tsx","images/elabLogo.svg","components/headers/header.tsx","popups/login.tsx","components/cards/mainFunctionCard.tsx","components/pages/mainFunctions.tsx","components/pages/storageSearch.tsx","services/requests.ts","services/api.ts","App.tsx","index.tsx"],"names":["LabelType","HeaderComponent","textStyle","padding","AppBar","position","Toolbar","Button","variant","color","disableElevation","onClick","e","props","onHome","style","height","width","Typography","paddingLeft","paddingRight","Box","fontWeight","src","elabLogo","alt","React","Component","LoginModal","passwordRef","loginRef","defaultLabel","elabService","state","username","password","open","error","label","loading","tried","msg","this","setState","Login","then","success","loginSuccess","loginFailed","catch","console","labelStyle","inputStyle","marginBottom","textFields","name","placeholder","onchange","target","value","type","onkeydown","key","focus","Modal","onClose","Grid","container","spacing","direction","alignItems","justify","outline","Card","component","align","item","justifyContent","map","f","TextField","onChange","onKeyDown","disabled","login","ref","Fade","in","CircularProgress","size","thickness","Prod_LoginModal","ConcreteLoginModal","MainFunctionCard","mainText","settings","s","cardStyle","border","background","cursor","newStyle","Object","assign","theme","palette","primary","main","onMouseEnter","onHover","onMouseLeave","onLeave","MainFunctionsComponent","cardClicked","functions","clicked","marginTop","fn","PrintComponent","apiService","UPDATE_DELAY","labels","labelsRaw","printDisabled","printAllDisabled","lastChange","Date","now","printing","gettingData","labelTemplateName","printerName","availablePrinters","availableTemplates","samples","samp","S","id","bar","length","startingSamples","parseLabels","toBarcodes","onRefresh","split","filter","trim","isInteger","v","test","barcodes","dispBar","cut","Math","max","substring","BarcodeLookup","data","newLabels","l","undefined","tokens","includes","t","ret","text","CUSTOM","temp","shift","join","d","SAMPLE","STORAGE_LOCATION","err","finally","sampleInputText","setTimeout","Promise","resolve","reject","tries","poll","PollPrintInfo","Success","Data","Labels","Barcode","Texts","TemplateName","PrintLabels","awaitResults","log","alert","Message","RefreshPrintInfo","printers","templates","buttonStyle","margin","inputPlaceholder","alignContent","gutterBottom","multiline","defaultValue","onLabelInputChanged","rows","columns","field","hide","headerName","sortable","rowsPerPageOptions","onPageSizeChange","isRowSelectable","params","row","disableSelectionOnClick","disableColumnMenu","disableColumnFilter","disableColumnSelector","opacity","LinearProgress","select","marginRight","option","MenuItem","bind","onPrintAll","navigator","clipboard","writeText","StorageSearchComponent","searching","results","storages","selectedSamples","errorText","errorCands","currentLocation","doTry","LoggedIn","GetStorages","res","allmap","reduce","acc","toLowerCase","parent","children","set","Map","parents","forEach","k","push","get","search","x","subsearch","arr","q","terms","term","found","domain","cands","GetSamplesByStorage","sampleID","sampleType","searchText","doSearch","getSamples","onSearchChanged","onPrintCallback","ReloadStorages","RequestService","baseUrl","requester","axios","path","url","endsWith","body","post","genUrl","ApiService","clientID","firstname","lastname","ClientID","that","POST","Username","Password","raw","Code","FirstName","LastName","b","makeBody","Barcodes","Results","StorageLayerID","Op","ID","Prod_ApiService","ApiServiceFactory","I","createTheme","contrastText","secondary","contrastThreshold","tonalOffset","App","defaultActiveComponent","GetApiService","mainFunctions","makeNextPage","activeComponent","toFunctionPage","document","getElementById","href","className","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f632f7cf.chunk.js","sourcesContent":["import React from \"react\";\nimport { PrintProps } from '../../models/props';\nimport { Typography, TextField, Grid, Card, Button, LinearProgress, Fade, CircularProgress, MenuItem} from '@material-ui/core';\nimport { DataGrid, GridColDef, GridRowParams } from '@material-ui/data-grid';\nimport RefreshRoundedIcon from '@mui/icons-material/RefreshRounded';\nimport { ApiService } from \"../../services/api\";\nimport { Sample } from \"../../models/common\";\n\nenum LabelType {\n    SAMPLE = 'Sample',\n    STORAGE_LOCATION = 'Location',\n    CUSTOM = 'Unknown',\n}\n\ninterface LabelData {\n    id: string\n    bar: string\n    text: string\n    type: LabelType\n}\n\ninterface PrintState {\n    labels: LabelData[]\n    labelsRaw: string\n    printDisabled: boolean\n    printAllDisabled: boolean\n    lastChange: number\n    printing: boolean\n    gettingData: boolean\n    labelTemplateName: string\n    printerName: string\n    availablePrinters: string[]\n    availableTemplates: string[]\n}\n\nexport class PrintComponent extends React.Component<PrintProps, PrintState> {\n    private apiService: ApiService\n    private readonly UPDATE_DELAY = 650;\n\n    constructor(props: PrintProps) {\n        super(props)\n        this.apiService = props.elabService\n        this.state = {\n            labels: [],\n            labelsRaw: '',\n            printDisabled: true,\n            printAllDisabled: false,\n            lastChange: Date.now(),\n            printing: false,\n            gettingData: false,\n            labelTemplateName: '',\n            printerName: '',\n            availablePrinters: [],\n            availableTemplates: [],\n        }\n    }\n\n    private toBarcodes(samples: Sample[] | undefined) {\n        if (!samples) return []\n        return samples.map((samp) => {\n            const S = samp.id\n            const BAR_L = 15\n            const PRE = '005'\n            let bar = `${S}`\n            while (bar.length < BAR_L - PRE.length) {\n                bar = `0${bar}`\n            }\n            return `${PRE}${bar}`\n        })\n    }\n\n    public componentDidMount() {\n        if (this.props.startingSamples) {\n            this.parseLabels(this.toBarcodes(this.props.startingSamples))\n        }\n        this.onRefresh()\n    }\n\n    private parseLabels(labels:string[]=[]) {\n        if (labels.length===0) {\n            labels = this.state.labelsRaw.split('\\n')\n        }\n        labels = labels.filter((s)=>{return s.trim().length>0})\n        const isInteger = (v: string) => !/[^0-9]/.test(v)\n        const isBarcode = labels.map(isInteger)\n        const barcodes = labels.filter(isInteger)\n\n        const dispBar = (bar: string) => {\n            const cut = Math.max(0, bar.length - 5)\n            return cut? `...${bar.substring(cut,)}` : bar\n        }\n\n        this.apiService.BarcodeLookup(barcodes)\n        .then((data)=>{\n            const newLabels: LabelData[] = labels.map((l) => {\n                if (data[l] === undefined) {\n                    const tokens = l.includes('\\t')? l.split('\\t'): l.split(',').map(t=>t.trim())\n                    const ret = {\n                        id: '',\n                        bar: '',\n                        text: l,\n                        type: LabelType.CUSTOM,\n                    }\n                    if (tokens.length > 1 && isInteger(tokens[0])) {\n                        const temp = tokens.shift();\n                        ret.bar = temp? dispBar(temp): '';\n                        ret.id = temp? temp: '';\n                        ret.text = tokens.join(' ');\n                    } else {\n                        ret.id = ''\n                        ret.bar = ''\n                        ret.text = l\n                    }\n                    return ret\n                } else {\n                    // console.log(data[l])\n                    const d: any = data[l]\n                    return {\n                        bar: dispBar(l),\n                        id: l,\n                        text: d.name,\n                        type: d['sampleID']? LabelType.SAMPLE: LabelType.STORAGE_LOCATION,\n                    }\n                }\n            })\n            this.setState({\n                labels: newLabels\n            })\n        }).catch((err)=>{\n            console.error(err);\n        }).finally(()=>{\n            this.setState({\n                gettingData: false\n            })\n        })\n\n        this.setState({\n            gettingData: true\n        })\n    }\n\n    private onLabelInputChanged(e: any) {\n        const sampleInputText = e.target.value;\n        this.setState({\n            labelsRaw: sampleInputText,\n            lastChange: Date.now()\n        })\n\n        setTimeout(() => {\n            const now = Date.now()\n            if (now - this.state.lastChange >= this.UPDATE_DELAY) {\n                this.parseLabels()\n            }\n        }, this.UPDATE_DELAY);\n    }\n\n    private awaitResults(id: any): Promise<any> {\n        return new Promise((resolve, reject)=> {\n            let tries = 25\n            const poll = () => {\n                tries--;\n                if (tries <= 0) {\n                    reject()\n                }\n                setTimeout(() => {\n                    this.apiService.PollPrintInfo(id).then((data) => {\n                        if (data.Success) {\n                            resolve(data.Data)\n                        } else {\n                            poll()\n                        }\n                    })\n                }, 500);\n            }\n            poll();\n        })\n    }\n\n    private onPrintAll() {\n        const data = {\n            Labels: this.state.labels.map((l) => {\n                return { Barcode: l.id, Texts: [l.text] }\n            }),\n            TemplateName: this.state.labelTemplateName \n        }\n\n        this.setState({\n            printing: true\n        })\n\n        this.apiService.PrintLabels(data).then(id=>{\n            return this.awaitResults(id)\n        }).then((data: any) => {\n            console.log(data)\n            alert(data.Message)\n        }).catch(() => {\n            // ignore\n        }).finally(()=> [\n            this.setState({\n                printing: false\n            })\n        ])\n\n\n    }\n\n    private onOpenSelectTemplate() {\n\n    }\n\n    private onRefresh() {\n        this.apiService.RefreshPrintInfo().then(id=>{\n            return this.awaitResults(id)\n        }).then((data)=> {\n            // console.log(data)\n            this.setState({\n                availablePrinters: data.printers,\n                availableTemplates: data.templates,\n            })\n        })\n    }\n\n    render(): JSX.Element {\n        const sampleColumns: GridColDef[] = [\n            { field: 'disabled', hide: true },\n            { field: 'id', headerName: 'ID', hide: true },\n            { field: 'bar', headerName: 'Barcode', width: 100, sortable: false },\n            { field: 'text', headerName: 'Text', width: 600, sortable: false },\n        ]\n\n        const outerStyle: React.CSSProperties = {\n            marginTop: '5vh',\n            justifyContent: 'center',\n            alignItems: 'center',\n            alignContent: 'center',\n            // border: '1px solid orange'\n        }\n        const cardStyle: React.CSSProperties = {\n            // border: '1px solid green',\n            // width: '80vw',\n            padding: '2em',\n        }\n        const buttonStyle: React.CSSProperties = {\n            margin: '0 1em 0 1em'\n        }\n        const inputPlaceholder = [\n            '123 box 23',\n            '005000000123456',\n            '...'\n        ].join('\\n')\n\n        return (\n            <Grid container justifyContent='center' style={outerStyle}>\n                <Card style={cardStyle}>\n                    <Grid container direction=\"column\" spacing={3}>\n                        <Grid item>\n                            <Typography variant=\"h5\" component=\"h2\" align=\"left\" gutterBottom={true} style={{}}>\n                                Print Labels\n                            </Typography>\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                                label=\"Items\"\n                                placeholder={inputPlaceholder}\n                                multiline\n                                variant=\"outlined\"\n                                style={{ width: '70em'}}\n                                defaultValue={this.toBarcodes(this.props.startingSamples).join('\\n')}\n                                onChange={(e) => { this.onLabelInputChanged(e) }}\n                            >\n                            </TextField>\n                        </Grid>\n                        <Grid item style={{ height: '30em'}} justify=\"center\">\n                            <Fade in={this.state.gettingData} style={{\n                                position: 'absolute',\n                                marginTop: '5em',\n                            }}>\n                                <CircularProgress size={50}/>\n                            </Fade>\n                            <DataGrid\n                                rows={this.state.labels}\n                                columns={sampleColumns}\n                                rowsPerPageOptions={[100]}\n                                onPageSizeChange={() => {}}\n                                isRowSelectable={(params: GridRowParams) => !params.row.disabled}\n                                disableSelectionOnClick\n                                disableColumnMenu\n                                disableColumnFilter\n                                disableColumnSelector\n                                style={{opacity: this.state.gettingData? 0.25: 1}}\n                            />\n                            <Grid item>\n                                <Fade in={this.state.printing}>\n                                    <LinearProgress />\n                                </Fade>\n                            </Grid>\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                                select\n                                label=\"Label Template\"\n                                variant=\"outlined\"\n                                style={{ width: '20.5em' , marginRight: '1em' }}\n                                value={this.state.labelTemplateName}\n                                // onChange={handleChange}\n                                onChange={(e) => { this.setState({labelTemplateName: e.target.value}) }}\n                            >\n                                {this.state.availableTemplates.map((option) => (\n                                    <MenuItem key={option} value={option}>\n                                        {option}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                            <TextField\n                                select\n                                label=\"Printer Name\"\n                                variant=\"outlined\"\n                                style={{ width: '20em' }}\n                                value={this.state.printerName}\n                                onChange={(e) => { this.setState({ printerName: e.target.value }) }}\n                            >\n                                {this.state.availablePrinters.map((option) => (\n                                    <MenuItem key={option} value={option}>\n                                        {option}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                disabled={this.state.printAllDisabled}\n                                onClick={this.onRefresh.bind(this)}\n                                style={{\n                                    margin: '0.6em',\n                                }}\n                            >\n                                <RefreshRoundedIcon />\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                disabled={this.state.printAllDisabled}\n                                style={buttonStyle}\n                                onClick={() => this.onPrintAll()}>\n                                Print All\n                            </Button>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                disabled={this.state.printAllDisabled}\n                                style={buttonStyle}\n                                onClick={() => navigator.clipboard.writeText(\n                                    ['Barcode\\tTexts'] + this.state.labels.map((l) => {\n                                        return `${l.id}\\t${l.text}`\n                                    }).join('\\n')\n                                )}>\n                                Copy to Clipboard\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Card>\n            </Grid>\n        )\n    }\n}","export default __webpack_public_path__ + \"static/media/elabLogo.6161d4d0.svg\";","import React from 'react';\n// import './header.css';\nimport { AppBar, Toolbar, Typography, Box, Button } from '@material-ui/core';\nimport HomeRoundedIcon from '@mui/icons-material/HomeRounded';\nimport elabLogo from '../../images/elabLogo.svg'\nimport { HeaderProps } from '../../models/props'\n\ninterface HeaderState {\n\n}\n\nexport class HeaderComponent extends React.Component<HeaderProps, HeaderState> {\n    render(): JSX.Element {\n        const textStyle: React.CSSProperties = {\n            padding: '2vh 0.5vw'\n        }\n        const titleStyle: React.CSSProperties = {\n            paddingLeft: '10vw',\n            paddingRight: '0.2vw'\n        }\n        return (\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <div>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            disableElevation\n                            onClick={(e) => {this.props.onHome()}}\n                            style={{\n                                height: '3.5em',\n                                width: '3.5em',\n                                padding: '0'\n                            }}\n                        >\n                            <HomeRoundedIcon/>\n                        </Button>\n                    </div>\n                    <div style={textStyle}>\n                        <Typography variant='h4' style={titleStyle}>\n                            <Box fontWeight='fontWeightBold'>\n                                Limes Portal\n                            </Box>\n                        </Typography>\n                    </div>\n                    <img src={elabLogo} alt='eLab' height='40vw' width='40vw'/>\n                    <div style={textStyle}>\n                        <Typography variant=\"subtitle1\">\n                            Powered by eLab\n                        </Typography>\n                    </div>\n                </Toolbar>\n            </AppBar>\n        )\n    }\n}","import React from 'react';\nimport { LoginProps } from '../models/props';\nimport { Modal, Grid, TextField, Button, CircularProgress, Fade, Typography, Card} from '@material-ui/core';\nimport { ApiService } from '../services/api';\n\nimport { DEBUG } from '../config'\nimport { U, P } from '../credentials/elab'\n\ninterface LoginState {\n    username: string\n    password: string\n    open: boolean\n    error: boolean\n    label: string\n    loading: boolean\n    tried: boolean\n}\n\nexport abstract class LoginModal extends React.Component<LoginProps, LoginState> {\n    protected passwordRef: any\n    protected loginRef: any\n    protected readonly defaultLabel = \"\"\n    protected readonly elabService: ApiService\n\n    constructor(props: LoginProps) {\n        super(props)\n\n        this.state = {\n            username: \"\",\n            password: \"\",\n            open: true,\n            error: false,\n            label: this.defaultLabel,\n            loading: false,\n            tried: false,\n        }\n\n        this.elabService = props.elabService;\n    }\n\n    protected loginFailed(msg: string, tried: boolean=true) {\n        this.setState({\n            error: true,\n            label: msg,\n            loading: false,\n            tried: tried,\n        })\n    }\n\n    protected loginSuccess() {\n        this.setState({ open: false, loading: false, tried: false })\n    }\n\n    protected login() {\n        // console.log([this.state.username, this.state.password])\n        if (this.state.tried) { return }\n        this.setState({ label: '', loading: true})\n        if (!(this.state.username && this.state.password)) {\n            this.loginFailed('fields cannot be empty')\n            return\n        }\n\n        this.elabService.Login(this.state.username, this.state.password)\n            .then(([success, msg]) => {\n                if (success) {\n                    this.loginSuccess()\n                } else {\n                    this.loginFailed(msg)\n                }\n            }).catch(e => {\n                console.error(e)\n                this.loginFailed(typeof(e)==='string'? e: 'No response. Are you on the UBC network?', false)\n            })\n    }\n\n    private onClose() { }\n\n    render(): JSX.Element {\n        const modalStyle: React.CSSProperties = {}\n        const mainGridStyle: React.CSSProperties = {\n            outline: 'transparent',\n            height: '100%',\n            // border: '1px solid red'\n        }\n        const cardStyle: React.CSSProperties = {\n            outline: 'transparent',\n            padding: '1em 2em 1.2em 2em', // t r b l\n            width: '25em',\n            // height: '20em',\n        }\n        const cardGridStyle: React.CSSProperties = {}\n        const labelStyle: React.CSSProperties = {}\n        const inputStyle: React.CSSProperties = {\n            width: '100%',\n            marginBottom: '1em',\n            // border: '1px solid red'\n        }\n        const buttonStyle: React.CSSProperties = {\n            width: '10em',\n        }\n\n        const textFields = [\n            {\n                name: \"username\",\n                label: \"Username\",\n                placeholder: \"username\",\n                onchange: (e: any) => {\n                    this.setState({\n                        error: false,\n                        tried: false,\n                        username: e.target.value\n                    })\n                },\n            },\n            {\n                name: \"password\",\n                label: \"Password\",\n                placeholder: \"*****\",\n                type: \"password\",\n                onchange: (e: any) => {\n                    this.setState({\n                        error: false,\n                        tried: false,\n                        password: e.target.value\n                    })\n                },\n                onkeydown: (e: any) => { e.key === \"Enter\" && this.loginRef?.focus() },\n            }\n        ]\n\n        return (\n            <Modal open={this.state.open} onClose={this.onClose} style={modalStyle}>\n                <Grid container spacing={0} direction=\"column\" alignItems=\"center\" justify=\"center\" style={mainGridStyle}>\n                    <Card style={cardStyle}>\n                        <Grid container justify=\"center\" direction=\"column\" style={cardGridStyle} spacing={0}>\n                            <Typography variant=\"h5\" component=\"h2\" align=\"center\" style={labelStyle}>\n                                Login\n                            </Typography>\n                            <Typography variant=\"subtitle1\" align=\"center\" color=\"error\" style={labelStyle}>\n                                {this.state.label}\n                            </Typography>\n                            <Grid item container justifyContent=\"center\" direction=\"column\">\n                                <form>\n                                    {textFields.map((f) => (\n                                        <Grid item key={f.name}>\n                                            <TextField\n                                                label={f.label}\n                                                name={f.name}\n                                                placeholder={f.placeholder}\n                                                style={inputStyle}\n                                                type={f.type}\n                                                error={this.state.error}\n                                                onChange={f.onchange}\n                                                onKeyDown={f.onkeydown}\n                                            />\n                                        </Grid>\n                                    ))}\n                                </form>\n                            </Grid>\n                            <Grid container justify=\"center\" >\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    style={buttonStyle}\n                                    disabled={this.state.loading}\n                                    onClick={() => { this.login() }}\n                                    ref={(e: any) => { this.loginRef = e }}>\n                                    Login\n                                    <Fade\n                                        in={this.state.loading}>\n                                        <CircularProgress size={20} thickness={5} style={{\n                                            position: 'absolute'\n\n                                        }}/>\n                                    </Fade>\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </Card>\n                </Grid>\n            </Modal>\n        )\n    }\n}\n\nclass Prod_LoginModal extends LoginModal {\n\n}\n\nclass Dev_LoginModal extends LoginModal {\n    constructor(props: LoginProps) {\n        super(props)\n\n        this.state = {\n            username: U,\n            password: P,\n            open: false,\n            error: false,\n            label: this.defaultLabel,\n            loading: false,\n            tried: false,\n        }\n        \n    }\n}\n\nexport const ConcreteLoginModal = DEBUG ? Dev_LoginModal : Prod_LoginModal","import React from 'react';\n// import \"./mainFunctionCard.css\"\nimport { Typography, Grid, Card } from '@material-ui/core';\nimport { MainFunctionCardProps, MainFunctionCardSettings } from '../../models/props';\n\ninterface MainFunctionCardState {\n    disabled: boolean\n    cardStyle: React.CSSProperties\n}\n\nexport class MainFunctionCard extends React.Component<MainFunctionCardProps, MainFunctionCardState> {\n    private mainText: string;\n    private onClick: (settings: MainFunctionCardSettings) => void;\n    private settings: MainFunctionCardSettings;\n\n    constructor(props: MainFunctionCardProps) {\n        super(props);\n        const s = props.settings\n\n        this.settings = props.settings\n        this.mainText = s.name\n        this.state = {\n            disabled: s.disabled,\n            cardStyle: {\n                width: '200px',\n                height: '200px',\n                border: '2px solid transparent',\n                background: s.disabled? 'lightgrey': '',\n                cursor: s.disabled? '': 'pointer',\n            }\n        }\n        this.onClick = props.onClick\n    }\n\n    private onHover() {\n        if (this.state.disabled) return\n        const newStyle: any = {}\n        Object.assign(newStyle, this.state.cardStyle)\n        newStyle.border = `2px solid ${this.props.theme.palette.primary.main}`\n        this.setState({cardStyle: newStyle})\n    }\n\n    private onLeave() {\n        if (this.state.disabled) return\n        const newStyle: any = {}\n        Object.assign(newStyle, this.state.cardStyle)\n        newStyle.border = '2px solid transparent'\n        this.setState({cardStyle: newStyle})\n    }\n\n    render(): JSX.Element {\n        const colStyle: React.CSSProperties = {\n            // border: '1px solid red'\n            height: '100%'\n        }\n\n        return (\n            <Card\n                style={this.state.cardStyle}\n                onClick={this.state.disabled? ()=>{} : () => this.onClick(this.settings)}\n                onMouseEnter={()=>{this.onHover()}}\n                onMouseLeave={()=>{this.onLeave()}}>\n                <Grid\n                    container\n                    spacing={0}\n                    justifyContent='center'\n                    alignItems='center'\n                    direction='column'\n                    style={colStyle}\n                >\n                    <Grid item>\n                        <Typography variant=\"h5\" component=\"h2\">\n                            {this.mainText}\n                        </Typography>\n                    </Grid>\n                </Grid>\n            </Card>\n        )\n    }\n}","import React from \"react\";\n// import \"./mainFunctionsGrid.css\"\nimport { Grid } from \"@material-ui/core\";\nimport { MainFunctionCard } from \"../cards/mainFunctionCard\";\nimport { MainFunctionsGridProps, MainFunctionCardSettings } from \"../../models/props\";\n\ninterface MainFunctionsState {\n    functions: MainFunctionCardSettings[]\n}\n\nexport class MainFunctionsComponent extends React.Component<MainFunctionsGridProps, MainFunctionsState> {\n    private cardClicked: (settings: MainFunctionCardSettings)=>void\n\n    constructor(props: MainFunctionsGridProps) {\n        super(props)\n        this.state = {\n            functions: props.functions,\n        }\n        this.cardClicked = props.clicked\n    }\n    render(): JSX.Element {\n        return (\n            <Grid\n                style={{\n                    marginTop: '10vh',\n                    // border: '1px solid red'\n                }}\n            >\n                <Grid container justifyContent='center' spacing={5}>\n                    {this.state.functions.map((fn) => (\n                        <Grid key={fn.name} item>\n                            <MainFunctionCard\n                                theme={this.props.theme}\n                                settings={fn}\n                                onClick={this.cardClicked}\n                            />\n                        </Grid>\n                    ))}\n                </Grid>\n            </Grid>\n        )\n    }\n}","import React from \"react\";\nimport { StorageSearchProps } from '../../models/props';\nimport { Typography, TextField, Grid, Card, Button, LinearProgress, Fade, CircularProgress } from '@material-ui/core';\nimport { DataGrid, GridColDef, GridRowParams } from '@material-ui/data-grid';\nimport { ApiService } from \"../../services/api\";\nimport { Sample } from \"../../models/common\";\n\ninterface Storage {\n    id: number\n    name: string\n    parent: number\n    children: Storage[]\n}\n\ninterface SearchState {\n    searching: boolean\n    currentLocation: string\n    results: string\n    lastChange: number\n    storages: Storage[]\n    selectedSamples: Sample[]\n    errorText: string\n    errorCands: string\n}\n\nexport class StorageSearchComponent extends React.Component<StorageSearchProps, SearchState> {\n    private apiService: ApiService\n    private readonly UPDATE_DELAY = 650;\n    constructor(props: StorageSearchProps) {\n        super(props)\n        this.apiService = props.elabService\n        this.state = {\n            searching: false,\n            results: '',\n            lastChange: Date.now(),\n            storages: [],\n            selectedSamples: [],\n            errorText: '',\n            errorCands: '',\n            currentLocation: '',\n        }\n    }\n\n    public componentDidMount() {\n        const setup = () => {\n            this.apiService.GetStorages().then(res => {\n                if (!res) return 0\n                const allmap: Map<number, Storage> = res.reduce((acc: Map<number, Storage>, s: any) => {\n                    const name: string = s['name']\n                    const id = s['storageLayerID']\n                    const v: Storage = {\n                        id: id,\n                        name: name.toLowerCase(),\n                        parent: s['parentStorageLayerID'],\n                        children: [],\n                    }\n                    acc.set(id, v)\n                    return acc\n                }, new Map())\n    \n                const parents: Storage[] = []\n                allmap.forEach((v, k, map) => {\n                    if (v.parent === 0) {\n                        parents.push(v)\n                    }else{\n                        allmap.get(v.parent)?.children.push(v)\n                    }\n                })\n    \n                this.setState({\n                    storages: parents\n                })\n            })\n        }\n\n        let tries = 5\n        const doTry = () => {\n            if (this.apiService.LoggedIn()) {\n                setup()\n            } else {\n                tries --;\n                if (tries <= 0) return\n                setTimeout(() => {\n                    doTry()\n                }, 100);\n            }\n        }\n        doTry()\n    }\n\n    private doSearch(text: string) {\n        return new Promise<number>((resolve) => {\n            const search = text.split(',').map((x)=> {return x.trim()})\n\n            const subsearch = (arr: Storage[], q: string) => {\n                const terms = q.split(' ')\n                const cands = arr.filter((s) => {\n                    return terms.reduce((acc: boolean, term) => {\n                        return acc && s.name.includes(term)\n                    }, true)\n                })\n                return cands\n            }\n\n            this.setState({\n                errorText: '',\n                errorCands: '',\n                currentLocation: '',\n            })\n\n            let res = \"\"\n            let found\n            let success = true\n            let domain = this.state.storages\n            for (let term of search) {\n                term = term.toLowerCase()\n                const cands = subsearch(domain, term)\n                if (cands.length === 1) {\n                    const s = cands[0]\n                    domain = s.children\n                    res += `, ${s.name}`\n                    found = s\n                } else if (cands.length === 0) {\n                    success = false\n                    this.setState({\n                        searching: false,\n                        errorText: `No storage location with name [${term}]`,\n                    })\n                    break\n                } else { // more than one\n                    success = false\n                    this.setState({\n                        searching: false,\n                        errorText: `Ambiguity for [${term}] between:`,\n                        errorCands: `${cands.map((s) => {return s.name}).join(', ')}`,\n                    })\n                    break\n                }\n            }\n    \n            if (success && found) {\n                this.setState({\n                    currentLocation: res\n                })\n                resolve(found.id)\n            } else {\n                return resolve(0)\n            }\n        })\n    }\n\n    private getSamples(id: number) {\n        return this.apiService.GetSamplesByStorage(id).then((samples: any[]) => {\n            if (!samples) samples = []\n            this.setState({\n                selectedSamples: samples.map<Sample>((s) => {\n                    return {\n                        id: s.sampleID,\n                        name: s.name,\n                        type: s.sampleType.name\n                    }\n                }),\n                searching: false\n            })\n        })\n    }\n\n    private onSearchChanged(e: any) {\n        const searchText = e.target.value;\n        this.setState({\n            lastChange: Date.now(),\n        })\n\n        setTimeout(() => {\n            const now = Date.now()\n            if (now - this.state.lastChange >= this.UPDATE_DELAY) {\n                this.setState({\n                    searching: true\n                })\n\n                this.doSearch(searchText)\n                .then((id: number) => {\n                    console.log(id)\n                    if (id === 0) return\n        \n                    return this.getSamples(id)\n                })\n            }\n        }, this.UPDATE_DELAY);\n    }\n\n    render(): JSX.Element {\n        // const classes = this.classes\n        const sampleColumns: GridColDef[] = [\n            { field: 'disabled', hide: true },\n            { field: 'id', headerName: 'Barcode', width: 100, sortable: false },\n            { field: 'name', headerName: 'Name', width: 400, sortable: false },\n            { field: 'type', headerName: 'Type', width: 350, sortable: false },\n        ]\n\n        const outerStyle: React.CSSProperties = {\n            marginTop: '5vh',\n            justifyContent: 'center',\n            alignItems: 'center',\n            alignContent: 'center',\n            // border: '1px solid orange'\n        }\n        const cardStyle: React.CSSProperties = {\n            // border: '1px solid green',\n            width: '90vw',\n            padding: '2em',\n        }\n        const buttonStyle: React.CSSProperties = {\n            margin: '0 1em 0 1em'\n        }\n        const inputPlaceholder = 'freezer 7, self 2, rack 3'\n        return (\n            <Grid container justifyContent='center' style={outerStyle}>\n                <Card style={cardStyle}>\n                    <Grid container direction=\"column\" spacing={3}>\n                        <Grid item>\n                            <Typography variant=\"h5\" component=\"h2\" align=\"left\" gutterBottom={true} style={{}}>\n                                Samples By Storage Location\n                            </Typography>\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                                    label=\"Search\"\n                                    placeholder={inputPlaceholder}\n                                    variant=\"outlined\"\n                                    onChange={this.onSearchChanged.bind(this)}\n                                    style={{\n                                        width: \"90vw\"\n                                    }}\n                                >\n                            </TextField>\n                        </Grid>\n                        <Grid item>\n                            <Typography align=\"left\" style={{\n                                color: 'primary',\n                            }}>\n                                {this.state.currentLocation}\n                            </Typography>\n                            <Typography align=\"left\" style={{\n                                color: 'red',\n                            }}>\n                                {this.state.errorText}\n                            </Typography>\n                            <Typography align=\"left\" style={{\n                                color: 'red',\n                            }}>\n                                {this.state.errorCands}\n                            </Typography>\n                        </Grid>\n                        <Grid item style={{ height: '30em' }} justify=\"center\">\n                            <Fade in={this.state.searching} style={{\n                                position: 'absolute',\n                                marginTop: '5em',\n                            }}>\n                                <CircularProgress size={50} />\n                            </Fade>\n                            <DataGrid\n                                rows={this.state.selectedSamples}\n                                columns={sampleColumns}\n                                rowsPerPageOptions={[100]}\n                                onPageSizeChange={() => { }}\n                                isRowSelectable={(params: GridRowParams) => !params.row.disabled}\n                                disableSelectionOnClick\n                                disableColumnMenu\n                                disableColumnFilter\n                                disableColumnSelector\n                                style={{ opacity: this.state.searching ? 0.25 : 1 }}\n                            />\n                        </Grid>\n                        <Grid item>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => {this.props.onPrintCallback(this.state.selectedSamples)}}\n                                style={buttonStyle}\n                            >\n                                Print Labels\n                            </Button>\n                            <Button\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                onClick={() => {this.apiService.ReloadStorages()}}\n                                style={buttonStyle}\n                            >\n                                Reload Storages\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Card>\n            </Grid>\n        )\n    }\n}","import axios, { AxiosStatic } from \"axios\";\n\nexport const GET = 'GET'\nexport const POST = 'POST'\n\nexport class RequestService {\n    private readonly baseUrl: string\n    private readonly requester: AxiosStatic\n\n    constructor(baseUrl: string = '') {\n        this.baseUrl = baseUrl;\n        this.requester = axios\n\n        // const ep = 'call'\n        // console.log('start')\n        // axios.post(`api/d1/${ep}`, {\n        //     ProviderName: 'elab',\n        //     RequestPayload: {\n        //         TargetEndpoint: 'auth/user',\n        //         Method: 'POST',\n        //         Body: {\n        //             username: username,\n        //             password: password\n        //         }\n        //     }\n        // }).then(x => {\n        //     console.log(x)\n        // }).catch(e => {\n        //     console.log('err')\n        //     console.log(e)\n        // }).finally(() => {\n        //     console.log('done')\n        // })\n    }\n\n    private genUrl(path: string) {\n        const url = `${this.baseUrl}/${path}`\n        return url.endsWith('/')? url.substring(0, url.length - 1): url;\n    }\n\n    // public GET(path: string): Promise<any> {\n    //     console.log(this.genUrl(path))\n    //     return this.requester.get(this.ge`${this.baseUrl}/${path}`nUrl(path)).then(x => {\n    //         console.log(x)\n    //         return 'done'\n    //     }).catch(e => {\n    //         console.log(e)\n    //     })\n    // }\n\n    public POST({path = '', body = {}}): Promise<any> {\n        return this.requester.post(this.genUrl(path), body)\n    }\n}","import { RequestService, POST } from \"./requests\"\nimport { U, P, T } from \"../credentials/elab\"\nimport { DEBUG } from \"../config\"\n\nexport abstract class ApiService {\n    protected clientID: string\n    protected firstname: string\n    protected lastname: string\n    private readonly requester: RequestService\n\n    constructor() {\n        // actually threading through server due to CORS security\n        // does not significantly slow requests\n        this.requester = new RequestService('api/d1')\n        this.clientID = ''\n        this.firstname = ''\n        this.lastname = ''\n    }\n\n    private makeBody(body: any={}) {\n        body.ClientID = this.clientID;\n        return body\n    }\n\n    public LoggedIn() {\n        return this.clientID !== ''\n    }\n\n    public Login(username: string, password: string): Promise<[boolean, string]> {\n        const that = this\n        return this.requester.POST({\n            path: 'login',\n            body: {\n                Username: username,\n                Password: password\n            }\n        })\n        .then(raw => {\n            const res = raw.data;\n            switch(res.Code) {\n                case 200:\n                    that.clientID = res.ClientID\n                    that.firstname = res.FirstName\n                    that.lastname = res.LastName\n                    console.log(`logged in as ${res.FirstName}`)\n                    return [true, '']\n                case 401:\n                    return [false, 'Incorrect username/password']\n                default:\n                    return Promise.reject('Oops, something crashed...')\n            }\n        })\n    }\n\n    public BarcodeLookup(barcodes: string[]): Promise<any> {\n        const b = this.makeBody({\n            Barcodes: barcodes\n        })\n        return this.requester.POST({\n            path: 'barcodes',\n            body: b\n        }).then(raw => {\n            const res = raw.data.Results;\n            return res;\n        })\n    }\n\n    public GetStorages(): Promise<any> {\n        const b = this.makeBody()\n        return this.requester.POST({\n            path: 'allstorages',\n            body: b\n        }).then(raw => {\n            const res = raw.data.Results\n            return res\n        })\n    }\n\n    public GetSamplesByStorage(id: number): Promise<any> {\n        const b = this.makeBody({\n            StorageLayerID: id\n        })\n        return this.requester.POST({\n            path: 'samplesbystorage',\n            body: b\n        }).then(raw => {\n            const res = raw.data.Results\n            return res\n        })\n    }\n\n    public ReloadStorages(): void {\n        const b = this.makeBody()\n        this.requester.POST({\n            path: 'reloadcache',\n            body: b\n        })\n    }\n\n    public PrintLabels(labels: any) {\n        const b = this.makeBody(labels)\n        b.Op = 'print'\n        return this.requester.POST({\n            path: 'printops',\n            body: b\n        }).then(raw => {\n            return raw.data.ID\n        })\n    }\n\n    public PollPrintInfo(id: string) {\n        const b = this.makeBody({\n            ID: id,\n            Op: 'poll',\n        })\n        return this.requester.POST({\n            path: 'printops',\n            body: b\n        }).then(raw=> {\n            return raw.data\n        })\n    }\n\n    public RefreshPrintInfo() {\n        const b = this.makeBody({\n            Op: 'refreshinfo',\n        })\n        return this.requester.POST({\n            path: 'printops',\n            body: b\n        }).then(raw => {\n            return raw.data.ID\n        })\n    }\n}\n\nclass Prod_ApiService extends ApiService {\n\n}\n\nclass Dev_ApiService extends ApiService {\n    constructor() {\n        super()\n        this.Login(U, P)\n    }\n}\n\nexport class ApiServiceFactory {\n    private static I: ApiService\n\n    public static GetApiService() {\n        if(!this.I) {\n            this.I = DEBUG? new Dev_ApiService(): new Prod_ApiService()\n        }\n\n        return this.I\n    }\n}","// import logo from './logo.svg';\nimport React from 'react';\nimport './App.css';\nimport { MuiThemeProvider, createTheme } from '@material-ui/core/styles';\nimport { HeaderComponent } from './components/headers/header';\nimport { ConcreteLoginModal } from './popups/login';\nimport { MainFunctionsComponent } from './components/pages/mainFunctions';\nimport { PrintComponent } from './components/pages/print';\nimport { StorageSearchComponent } from './components/pages/storageSearch';\n\nimport { AppProps, MainFunctionCardSettings } from './models/props';\nimport { ApiService, ApiServiceFactory } from './services/api';\nimport { DEBUG } from './config'\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#00abab',\n      contrastText: '#FFFFFF',\n    },\n    secondary: {\n      main: '#d32f2f',\n    },\n    contrastThreshold: 3,\n    tonalOffset: 0.2,\n  },\n});\n\ninterface AppState {\n  activeComponent: any\n}\n\nexport class App extends React.Component<AppProps, AppState> {\n  private defaultActiveComponent: any\n  private elabService: ApiService\n\n  constructor(props: AppProps) {\n    super(props)\n    this.elabService = ApiServiceFactory.GetApiService()\n\n    const makePrintComponent = () => <PrintComponent elabService={this.elabService}/>\n    const makeStorageSearchComponent = () => <StorageSearchComponent elabService={this.elabService} onPrintCallback={\n      (samples) => {\n        this.setState({\n          activeComponent: <PrintComponent elabService={this.elabService} startingSamples={samples}/>\n        })\n      }\n    }/>\n    const mainFunctions: MainFunctionCardSettings[] = [\n      {\n        name: 'Print',\n        disabled: false,\n        makeNextPage: makePrintComponent\n      },\n      {\n        name: 'Samples By Storage Location',\n        disabled: false,\n        makeNextPage: makeStorageSearchComponent\n      },\n      {\n        name: 'Scanner coming soon!',\n        disabled: true,\n      }\n    ]\n    this.defaultActiveComponent = (\n      <MainFunctionsComponent\n        theme={theme}\n        functions={mainFunctions}\n        clicked={(settings: MainFunctionCardSettings) => this.toFunctionPage(settings)}\n      />)\n    this.state = {\n      activeComponent: DEBUG? <PrintComponent elabService={this.elabService} startingSamples={[\n        9763616,\n        9763617,\n        9763618,\n        9763619,\n        9763620,\n      ].map(i=>{return {id: i, name:'s', type: 't'}})}/>: this.defaultActiveComponent,\n    }\n  }\n\n  private toFunctionPage(settings: MainFunctionCardSettings) {\n    if (settings && settings.makeNextPage) {\n      this.setState({activeComponent: settings.makeNextPage()})\n    }\n  }\n\n  render(): JSX.Element {\n    const fav: any = document.getElementById(\"favicon\");\n    fav.href = '/forcefavicon'\n    return (\n      <MuiThemeProvider theme={theme}>\n        <div className='app-container'>\n        <HeaderComponent onHome={() => {this.setState({activeComponent: this.defaultActiveComponent})}}/>\n        <ConcreteLoginModal elabService={this.elabService}/>\n        {this.state.activeComponent}\n        </div>\n      </MuiThemeProvider>\n    )\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport './index.css';\nimport '@fontsource/roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}